<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" href="/image/btw.png"/> 
    <link rel="icon" type="image/png" href="/image/btw.png"/> 
    <link rel="stylesheet" href="/css/common.css" />
    <title>불꽃테니스</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        .filter-section { position: static; z-index: 101; padding: 15px; background-color: #f8f9fa; border-bottom: 1px solid #eee; flex-shrink: 0; }
        .filter-section .dropdown-toggle { display: flex; justify-content: space-between; align-items: center; text-align: left; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .dropdown-menu { padding: .75rem; width: 100%; font-size: 0.8rem;}
        .dropdown-menu .checkbox-group { max-height: 250px; overflow-y: auto; margin-bottom: .5rem;}
        .filter-control-links { padding-bottom: .5rem; margin-bottom: .5rem; border-bottom: 1px solid #eee; }
        .filter-control-links a { font-size: .8rem; color: #6c757d; text-decoration: none; margin-left: 10px; }
        .table-responsive { flex-grow: 1; overflow-y: auto; }
        #scoreTable { font-size: 0.8rem; }
        #scoreTable th { position: sticky; top: 0; background-color: #f8f9fa; z-index: 90; }
        #scoreTable .sortable-th { cursor: pointer; }
        #searchToggle .bi-search { font-size: 1.2rem; color: black; margin-right: 15px; }
        .text-deuce { color: darkblue; }
        .text-ad { color: darkgreen; }
        .diff-plus { color: darkblue; }
        .diff-minus { color: darkgreen; }
        #scoreTable tbody tr { cursor: pointer; }
        .modal-body .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .modal-body .stat-item:last-child {
            border-bottom: none;
        }
        .modal-body .stat-value {
            text-align: right;
        }
    </style>
</head>

<body>
    <div class="app-container">
        <div class="d-flex align-items-center sticky-header" style="padding: 0px 5px;">
            <div class="d-flex align-items-center flex-grow-1">
                <a href="/my-score">
                    <img src="/image/btw-tran-180x180.png" alt="로고" style="height: 40px; margin-right: 5px;">
                </a>
                <a href="/my-score" style="color: black; text-decoration: none;">
                    <h5 style="margin-bottom: 0;"><b>개인 스코어</b></h5>
                </a>
            </div>
            <i class="bi bi-list hamburger-icon"></i>
        </div>

        <%- include('partials/sidemenu') %>

        <div class="filter-section">
             <div class="row g-2">
                 <div class="col-4">
                     <div class="dropdown">
                         <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="periodDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">
                             기간: 전체
                         </button>
                         <ul class="dropdown-menu" aria-labelledby="periodDropdownButton">
                             <% const periods = [
                                 { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' },
                                 { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' },
                                 { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' },
                                 { value: '2024', text: '2024년' }
                             ]; %>
                             <% periods.forEach(period => { %>
                                 <li><a class="dropdown-item" href="#" onclick="applyFilters({ period: '<%= period.value %>' })"><%= period.text %></a></li>
                             <% }) %>
                         </ul>
                     </div>
                 </div>
                 <div class="col-4">
                     <div class="dropdown">
                         <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="typeDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                             분류
                         </button>
                         <div class="dropdown-menu" aria-labelledby="typeDropdownButton">
                             <div class="filter-control-links"><a href="#" onclick="selectAll('typeFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('typeFilter'); return false;">전체해제</a></div>
                             <div id="typeFilter" class="checkbox-group">
                                 <% const types = ['남단', '여단', '남복', '여복', '혼복', '혼복(남3)', '혼복(여3)', '혼단(남vs여)', '혼복(남vs여)']; %>
                                 <% types.forEach(type => { %>
                                     <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= type %>" id="type-<%= type %>"><label class="form-check-label" for="type-<%= type %>"><%= type %></label></div>
                                 <% }) %>
                             </div>
                             <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                         </div>
                     </div>
                 </div>
                 <div class="col-4">
                     <div class="dropdown">
                         <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="courtDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                             코트
                         </button>
                         <div class="dropdown-menu" aria-labelledby="courtDropdownButton">
                             <div class="filter-control-links"><a href="#" onclick="selectAll('courtFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('courtFilter'); return false;">전체해제</a></div>
                             <div id="courtFilter" class="checkbox-group">
                                 <% courts.forEach(court => { %>
                                     <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= court.name %>" id="court-<%= court.name %>"><label class="form-check-label" for="court-<%= court.name %>"><%= court.name %></label></div>
                                 <% }) %>
                             </div>
                             <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                         </div>
                     </div>
                 </div>
             </div>
        </div>

        <div class="table-responsive">
            <table id="scoreTable" class="table table-sm table-striped text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th class="sortable-th" onclick="sortTable(0)">이름</th>
                        <th class="sortable-th" onclick="sortTable(1)">경기수</th>
                        <th class="sortable-th" onclick="sortTable(2)">승률</th>
                        <th class="sortable-th" onclick="sortTable(3)">포<br>비율</th>
                        <th class="sortable-th" onclick="sortTable(4)">포<br>승률</th>
                        <th class="sortable-th" onclick="sortTable(5)">백<br>비율</th>
                        <th class="sortable-th" onclick="sortTable(6)">백<br>승률</th>
                        <th class="sortable-th" onclick="sortTable(7)">가중<br>포-백</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <% if (scores && scores.length > 0) { %>
                        <% scores.forEach(player => { %>
                            <tr onclick="showPlayerDetails(this)"
                                data-name="<%= player.name %>"
                                data-matches="<%= player.matches %>"
                                data-wins="<%= player.wins %>"
                                data-losses="<%= player.losses %>"
                                data-draws="<%= player.draws %>"
                                data-win-rate="<%= player.winRate %>"
                                data-deuce-matches="<%= player.deuceMatches %>"
                                data-deuce-wins="<%= player.deuceWins %>"
                                data-deuce-losses="<%= player.deuceLosses %>"
                                data-deuce-draws="<%= player.deuceDraws %>"
                                data-deuce-win-rate="<%= player.deuceWinRate %>"
                                data-deuce-rate="<%= player.deuceRate %>"
                                data-ad-matches="<%= player.adMatches %>"
                                data-ad-wins="<%= player.adWins %>"
                                data-ad-losses="<%= player.adLosses %>"
                                data-ad-draws="<%= player.adDraws %>"
                                data-ad-win-rate="<%= player.adWinRate %>"
                                data-ad-rate="<%= player.adRate %>"
                                data-weighted-diff="<%= player.weightedDiff %>">
                                <td><strong><%= player.name %></strong></td>
                                <td><%= player.matches %></td>
                                <td>
                                    <span>
                                    <% if (player.winRate > 50) { %><strong><%= player.winRate %>%</strong><% } else { %><%= player.winRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-deuce">
                                    <% if (player.deuceRate > 50) { %><strong><%= player.deuceRate %>%</strong><% } else { %><%= player.deuceRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-deuce">
                                    <% if (player.deuceWinRate > 50) { %><strong><%= player.deuceWinRate %>%</strong><% } else { %><%= player.deuceWinRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-ad">
                                    <% if (player.adRate > 50) { %><strong><%= player.adRate %>%</strong><% } else { %><%= player.adRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-ad">
                                    <% if (player.adWinRate > 50) { %><strong><%= player.adWinRate %>%</strong><% } else { %><%= player.adWinRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="<%= player.weightedDiff > 0 ? 'diff-plus' : (player.weightedDiff < 0 ? 'diff-minus' : '') %>">
                                        <%= player.weightedDiff > 0 ? '+' : '' %><%= player.weightedDiff %>%
                                    </span>
                                </td>
                                <td><i class="bi bi-chevron-right text-muted"></i></td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="9" class="text-center p-5">표시할 데이터가 없습니다.<br><small>필터 조건을 변경하거나 경기 기록을 추가해주세요.</small></td></tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <%- include('partials/navbar', { currentPage: 'my-score' }) %>
    </div>

    <div class="modal fade" id="playerDetailModal" tabindex="-1" aria-labelledby="playerDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="playerDetailModalLabel"><b><span id="modalPlayerName"></span></b></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalBodyContent" style="padding: 0;">
                    </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/common-filter.js"></script>
    <script>
        function applyFilters(options = {}) {
            let filters = filterStorage.load();
            filters.types = Array.from(document.querySelectorAll('#typeFilter input:checked')).map(cb => cb.value);
            filters.courts = Array.from(document.querySelectorAll('#courtFilter input:checked')).map(cb => cb.value);
            if (options.period) filters.period = options.period;
            filterStorage.save(filters);

            const params = new URLSearchParams();
            params.set('period', filters.period);
            if (filters.types.length > 0) params.set('types', filters.types.join(','));
            if (filters.courts && filters.courts.length > 0) params.set('courts', filters.courts.join(','));
            
            window.location.href = `/my-score?${params.toString()}`;
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            const savedFilters = filterStorage.load();
            
            const currentParams = new URLSearchParams(window.location.search);
            const savedParams = new URLSearchParams();
            savedParams.set('period', savedFilters.period);
            if (savedFilters.types.length > 0) savedParams.set('types', savedFilters.types.join(','));
            if (savedFilters.courts && savedFilters.courts.length > 0) savedParams.set('courts', savedFilters.courts.join(','));

            if (currentParams.toString() !== savedParams.toString()) {
                window.location.replace(`/my-score?${savedParams.toString()}`);
                return;
            }

            const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ];
            const selectedPeriod = periods.find(p => p.value === savedFilters.period) || periods[3];
            document.getElementById('periodDropdownButton').textContent = `기간: ${selectedPeriod.text}`;
            document.querySelectorAll('#typeFilter input').forEach(cb => { if (savedFilters.types.includes(cb.value)) cb.checked = true; });
            if (savedFilters.courts) document.querySelectorAll('#courtFilter input').forEach(cb => { if (savedFilters.courts.includes(cb.value)) cb.checked = true; });
            
            updateCheckboxDropdownText('typeDropdownButton', 'typeFilter', '분류');
            updateCheckboxDropdownText('courtDropdownButton', 'courtFilter', '코트');
            
            defaultSortTable();
        });

        const sortState = { columnIndex: 1, ascending: false };
        function sortTable(columnIndex) {
            const table = document.getElementById('scoreTable');
            const tbody = table.querySelector('tbody');
            if (tbody.rows.length <= 1 && tbody.rows[0].cells.length <= 1) { return; }
            const rows = Array.from(tbody.querySelectorAll('tr'));
            if (sortState.columnIndex === columnIndex) { sortState.ascending = !sortState.ascending; } else { sortState.columnIndex = columnIndex; sortState.ascending = false; }
            rows.sort((rowA, rowB) => {
                const cellA = rowA.cells[columnIndex];
                const cellB = rowB.cells[columnIndex];
                let valA, valB;
                if (columnIndex === 0) {
                    valA = cellA.innerText.trim();
                    valB = cellB.innerText.trim();
                    return sortState.ascending ? valA.localeCompare(valB) : valB.localeCompare(valA);
                } else {
                    valA = parseFloat(cellA.innerText.replace(/%|\+/g, '').trim());
                    valB = parseFloat(cellB.innerText.replace(/%|\+/g, '').trim());
                    if (isNaN(valA)) valA = -Infinity;
                    if (isNaN(valB)) valB = -Infinity;
                    return sortState.ascending ? valA - valB : valB - valA;
                }
            });
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }

        function defaultSortTable() {
            const table = document.getElementById('scoreTable');
            const tbody = table.querySelector('tbody');
            if (!tbody || (tbody.rows.length <= 1 && tbody.rows[0].cells.length <= 1)) { return; }
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const getValue = (row, index) => {
                const text = row.cells[index].innerText.trim().replace(/%|\+/g, '');
                const value = parseFloat(text);
                return isNaN(value) ? -Infinity : value;
            };
            rows.sort((a, b) => {
                const matchesA = getValue(a, 1);
                const matchesB = getValue(b, 1);
                if (matchesA !== matchesB) {
                    return matchesB - matchesA;
                }
                const winRateA = getValue(a, 2);
                const winRateB = getValue(b, 2);
                return winRateB - winRateA;
            });
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }

        let detailModal = null;
        async function showPlayerDetails(rowElement) {
            const dataset = rowElement.dataset;
            const name = dataset.name;
            
            const summaryHtml = buildSummaryHtml(dataset);
            const modalBody = document.getElementById('modalBodyContent');
            modalBody.innerHTML = summaryHtml;

            document.getElementById('modalPlayerName').textContent = name;
            
            // 모달 표시
            if (!detailModal) {
                detailModal = new bootstrap.Modal(document.getElementById('playerDetailModal'));
            }
            detailModal.show();

            // 경기 기록 가져오기 및 테이블 생성
            const savedFilters = filterStorage.load();
            const params = new URLSearchParams({
                period: savedFilters.period,
                types: savedFilters.types.join(','),
                courts: savedFilters.courts.join(',')
            });

            try {
                const response = await fetch(`/api/matches/player/${name}?${params.toString()}`);
                if (!response.ok) throw new Error('경기 기록을 불러오는 데 실패했습니다.');
                const matches = await response.json();
                const tablesHtml = buildPlayerMatchTablesHtml(matches, name);
                modalBody.innerHTML += tablesHtml;
            } catch (error) {
                console.error(error);
                modalBody.innerHTML += `<p class="text-center p-3 text-danger">${error.message}</p>`;
            }
        }

        function buildSummaryHtml(dataset) {
            const { name, matches, wins, losses, draws, winRate, deuceMatches, deuceWins, deuceLosses, deuceDraws, deuceWinRate, deuceRate, adMatches, adWins, adLosses, adDraws, adWinRate, adRate, weightedDiff } = dataset;
            const drawsText = parseInt(draws) > 0 ? `${draws}무 ` : '';
            const deuceDrawsText = parseInt(deuceDraws) > 0 ? `${deuceDraws}무 ` : '';
            const adDrawsText = parseInt(adDraws) > 0 ? `${adDraws}무 ` : '';
            const winRateText = parseInt(winRate) > 50 ? `<strong>(${winRate}%)</strong>` : `(${winRate}%)`;
            const deuceWinRateText = parseInt(deuceWinRate) > 50 ? `<strong>(${deuceWinRate}%)</strong>` : `(${deuceWinRate}%)`;
            const adWinRateText = parseInt(adWinRate) > 50 ? `<strong>(${adWinRate}%)</strong>` : `(${adWinRate}%)`;
            const deuceRateText = parseInt(deuceRate) > 50 ? `<strong>${deuceRate}%</strong>` : `${deuceRate}%`;
            const adRateText = parseInt(adRate) > 50 ? `<strong>${adRate}%</strong>` : `${adRate}%`;
            const diffSign = parseInt(weightedDiff) > 0 ? '+' : '';
            const diffClass = parseInt(weightedDiff) > 0 ? 'diff-plus' : (parseInt(weightedDiff) < 0 ? 'diff-minus' : '');
            
            const tags = [];
            if (parseInt(deuceRate) > parseInt(adRate)) tags.push('#포많이하는');
            else if (parseInt(adRate) > parseInt(deuceRate)) tags.push('#백많이하는');
            if (parseInt(deuceWinRate) > parseInt(adWinRate)) tags.push('#포잡이');
            else if (parseInt(adWinRate) > parseInt(deuceWinRate)) tags.push('#백잡이');

            return `
                <div style="padding: 1rem; border-bottom: 1px solid #dee2e6;">
                    <div class="stat-item">
                        <span><strong>📊&nbsp; 전체</strong></span>
                        <span class="stat-value">${matches}전 ${wins}승 ${drawsText}${losses}패 ${winRateText}</span>
                    </div>
                    <div class="stat-item text-deuce">
                        <span><strong>🫱&nbsp; 포 비율</strong> ${deuceRateText}</span>
                        <span class="stat-value text-deuce">${deuceMatches}전 ${deuceWins}승 ${deuceDrawsText}${deuceLosses}패 ${deuceWinRateText}</span>
                    </div>
                    <div class="stat-item text-ad">
                        <span><strong>🫲&nbsp; 백 비율</strong> ${adRateText}</span>
                        <span class="stat-value text-ad">${adMatches}전 ${adWins}승 ${adDrawsText}${adLosses}패 ${adWinRateText}</span>
                    </div>
                    <div class="stat-item">
                        <span><strong>⚖️&nbsp; 포-백 승리 가중치</strong></span>
                        <span class="stat-value ${diffClass}">${diffSign}${weightedDiff}%</span>
                    </div>
                    <div class="stat-item">
                        <span></span>
                        <span class="stat-value">${tags.join(' ')}</span>
                    </div>
                </div>`;
        }
        
        function buildPlayerMatchTablesHtml(matches, basePlayer) {
            if (matches.length === 0) {
                return '<p class="text-center p-4">해당 조건의 경기 기록이 없습니다.</p>';
            }

            const deuceMatches = [];
            const adMatches = [];

            matches.forEach(match => {
                if (match.team1_deuce === basePlayer || match.team2_deuce === basePlayer) {
                    deuceMatches.push(match);
                } else if (match.team1_ad === basePlayer || match.team2_ad === basePlayer) {
                    adMatches.push(match);
                }
            });

            const highlightPlayer = (player) => (player === basePlayer) ? `<strong>${player}</strong>` : player;
            let finalHtml = '';

            const createTable = (title, matchList, titleClass) => {
                if (matchList.length === 0) return '';
                let tableHtml = `
                    <div class="mt-3" style="padding: 0 1rem;">
                        <h6 class="p-2" style="border-bottom: 2px solid ${titleClass === 'text-deuce' ? 'darkblue' : 'darkgreen'}; color: ${titleClass === 'text-deuce' ? 'darkblue' : 'darkgreen'};">${title}</h6>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-sm table-striped text-center align-middle text-nowrap" style="font-size: 0.8rem; margin-bottom: 0;">
                            <thead class="table-light">
                                <tr><th>날짜</th><th>코트</th><th>우리 팀</th><th>상대 팀</th><th>스코어</th><th>결과</th><th>영상</th></tr>
                            </thead>
                            <tbody>`;
                
                matchList.forEach(match => {
                    const team1_raw = [match.team1_deuce, match.team1_ad].filter(p => p);
                    const team2_raw = [match.team2_deuce, match.team2_ad].filter(p => p);
                    const isBaseOnTeam1 = team1_raw.includes(basePlayer);
                    
                    const myTeam = isBaseOnTeam1 ? team1_raw : team2_raw;
                    const opponentTeam = isBaseOnTeam1 ? team2_raw : team1_raw;
                    const score = isBaseOnTeam1 ? `${match.team1_score}:${match.team2_score}` : `${match.team2_score}:${match.team1_score}`;
                    const result = isBaseOnTeam1 ? match.team1_result : match.team2_result;

                    const myTeamFormatted = myTeam.map(highlightPlayer).join('/');
                    const opponentTeamFormatted = opponentTeam.join('/');

                    const myTeamHtml = result === '승' ? `<span style="color: darkblue;">${myTeamFormatted}</span>` : `<span>${myTeamFormatted}</span>`;
                    const opponentTeamHtml = result === '패' ? `<span style="color: darkblue;">${opponentTeamFormatted}</span>` : `<span>${opponentTeamFormatted}</span>`;

                    const result_display = result === '승' ? '<span style="color: darkblue;">승</span>' : (result === '패' ? '<span style="color: darkred;">패</span>' : '<span>무</span>');
                    const videoLink = match.video ? `<a href="${match.video}" target="_blank" rel="noopener" onclick="event.stopPropagation();"><i class="bi bi-youtube text-danger fs-6"></i></a>` : '';
                    const dateDisplay = match.date ? match.date.substring(2) : '';

                    tableHtml += `<tr><td>${dateDisplay}</td><td>${match.court}</td><td>${myTeamHtml}</td><td>${opponentTeamHtml}</td><td>${score}</td><td>${result_display}</td><td>${videoLink}</td></tr>`;
                });

                tableHtml += '</tbody></table></div>';
                return tableHtml;
            };

            finalHtml += createTable('🫱 <strong>듀스코트(포) 경기</strong>', deuceMatches, 'text-deuce');
            finalHtml += createTable('🫲 <strong>애드코트(백) 경기</strong>', adMatches, 'text-ad');

            return finalHtml;
        }

    </script>
</body>
</html>