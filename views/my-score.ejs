<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" href="/image/btw.png"/> 
    <link rel="icon" type="image/png" href="/image/btw.png"/> 
    <title>불꽃테니스</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        html, body { height: 100%; overflow: hidden; margin: 0; }
        .app-container { display: flex; flex-direction: column; height: 100%; }
        .sticky-header { position: static; z-index: 102; border-bottom: 1px solid #eee; height: 60px; flex-shrink: 0; }
        .filter-section { position: static; z-index: 101; padding: 15px; background-color: #f8f9fa; border-bottom: 1px solid #eee; flex-shrink: 0; }
        .filter-section .dropdown-toggle { display: flex; justify-content: space-between; align-items: center; text-align: left; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .dropdown-menu { padding: .75rem; width: 100%; font-size: 0.8rem;}
        .dropdown-menu .checkbox-group { max-height: 250px; overflow-y: auto; margin-bottom: .5rem;}
        .filter-control-links { padding-bottom: .5rem; margin-bottom: .5rem; border-bottom: 1px solid #eee; }
        .filter-control-links a { font-size: .8rem; color: #6c757d; text-decoration: none; margin-left: 10px; }
        .table-responsive { flex-grow: 1; overflow-y: auto; }
        #scoreTable { font-size: 0.8rem; }
        #scoreTable th { position: sticky; top: 0; background-color: #f8f9fa; z-index: 90; }
        #scoreTable .sortable-th { cursor: pointer; }
        .bottom-nav { position: static; border-top: 1px solid #ddd; background-color: white; z-index: 103; flex-shrink: 0; }
        .bottom-nav .nav-link { font-size: 0.9rem; padding: 0.5rem 0; color: #888888; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; }
        .bottom-nav .nav-link img { width: 24px; height: 24px; margin-bottom: 4px; filter: grayscale(100%); opacity: 0.3; }
        .bottom-nav .nav-link.active { color: black !important; }
        .bottom-nav .nav-link.active img { filter: none; opacity: 1; }
        #searchToggle .bi-search { font-size: 1.2rem; color: black; margin-right: 15px; }
        .text-deuce { color: darkblue; }
        .text-ad { color: darkgreen; }
        .diff-plus { color: darkblue; }
        .diff-minus { color: darkgreen; }
        /* 행 클릭을 유도하기 위해 커서 모양 변경 */
        #scoreTable tbody tr { cursor: pointer; }
        /* 모달 스타일 추가 */
        .modal-body .stat-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .modal-body .stat-item:last-child {
            border-bottom: none;
        }
        .modal-body .stat-value {
            text-align: right;
        }
        /* --- ✨ 햄버거 메뉴 스타일 추가 --- */
        .hamburger-icon { font-size: 1.8rem; margin-right: 10px; color: black; cursor: pointer; }
        .side-menu {
            position: fixed;
            top: 0;
            right: -200px;
            width: 200px;
            height: 100%;
            background-color: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transition: right 0.3s ease-in-out;
            z-index: 1040;
            padding: 20px;
        }
        .side-menu.active { right: 0; }
        .side-menu a { display: block; padding: 15px 10px; color: #333; text-decoration: none; border-bottom: 1px solid #f0f0f0; }
        .side-menu a:hover { background-color: #f8f9fa; }
        .overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1030; }
        .overlay.active { display: block; }
    </style>
</head>

<body>
    <div class="app-container">
        <!-- 헤더 -->
        <div class="d-flex align-items-center sticky-header" style="padding: 0px 5px;">
             <div class="d-flex align-items-center flex-grow-1">
                <img src="/image/btw.png" alt="로고" style="height: 40px; margin-right: 15px;">
                <h5 style="margin-bottom: 0;"><b>개인 스코어</b></h5>
            </div>
            <i class="bi bi-list hamburger-icon"></i>
        </div>

        <div class="side-menu">
            <h5>메뉴</h5>
            <hr>
            <a href="/chemistry-score"><i class="bi bi-person-heart"></i>&nbsp;&nbsp;케미 스코어</a>
            <a href="/attendance"><i class="bi bi-calendar-check"></i>&nbsp;&nbsp;출석부</a>
        </div>
        <div class="overlay"></div>

        <!-- 필터 섹션 -->
        <div class="filter-section">
             <div class="row g-2">
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="periodDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">
                            기간: 전체
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="periodDropdownButton">
                            <% const periods = [
                                { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' },
                                { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' },
                                { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' },
                                { value: '2024', text: '2024년' }
                            ]; %>
                            <% periods.forEach(period => { %>
                                <li><a class="dropdown-item" href="#" onclick="applyFilters({ period: '<%= period.value %>' })"><%= period.text %></a></li>
                            <% }) %>
                        </ul>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="typeDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                            분류
                        </button>
                        <div class="dropdown-menu" aria-labelledby="typeDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('typeFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('typeFilter'); return false;">전체해제</a></div>
                            <div id="typeFilter" class="checkbox-group">
                                <% const types = ['남단', '여단', '남복', '여복', '혼복', '혼복(남3)', '혼복(여3)', '혼단(남vs여)', '혼복(남vs여)']; %>
                                <% types.forEach(type => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= type %>" id="type-<%= type %>"><label class="form-check-label" for="type-<%= type %>"><%= type %></label></div>
                                <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="courtDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                            코트
                        </button>
                        <div class="dropdown-menu" aria-labelledby="courtDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('courtFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('courtFilter'); return false;">전체해제</a></div>
                            <div id="courtFilter" class="checkbox-group">
                                <% courts.forEach(court => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= court.name %>" id="court-<%= court.name %>"><label class="form-check-label" for="court-<%= court.name %>"><%= court.name %></label></div>
                                <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 테이블 -->
        <div class="table-responsive">
            <table id="scoreTable" class="table table-sm table-striped text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th class="sortable-th" onclick="sortTable(0)">이름</th>
                        <th class="sortable-th" onclick="sortTable(1)">경기수</th>
                        <th class="sortable-th" onclick="sortTable(2)">승률</th>
                        <th class="sortable-th" onclick="sortTable(3)">포<br>비율</th>
                        <th class="sortable-th" onclick="sortTable(4)">포<br>승률</th>
                        <th class="sortable-th" onclick="sortTable(5)">백<br>비율</th>
                        <th class="sortable-th" onclick="sortTable(6)">백<br>승률</th>
                        <th class="sortable-th" onclick="sortTable(7)">가중<br>포-백</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <% if (scores && scores.length > 0) { %>
                        <% scores.forEach(player => { %>
                            <tr onclick="showPlayerDetails(this)"
                                data-name="<%= player.name %>"
                                data-matches="<%= player.matches %>"
                                data-wins="<%= player.wins %>"
                                data-losses="<%= player.losses %>"
                                data-draws="<%= player.draws %>"
                                data-win-rate="<%= player.winRate %>"
                                data-deuce-matches="<%= player.deuceMatches %>"
                                data-deuce-wins="<%= player.deuceWins %>"
                                data-deuce-losses="<%= player.deuceLosses %>"
                                data-deuce-draws="<%= player.deuceDraws %>"
                                data-deuce-win-rate="<%= player.deuceWinRate %>"
                                data-deuce-rate="<%= player.deuceRate %>"
                                data-ad-matches="<%= player.adMatches %>"
                                data-ad-wins="<%= player.adWins %>"
                                data-ad-losses="<%= player.adLosses %>"
                                data-ad-draws="<%= player.adDraws %>"
                                data-ad-win-rate="<%= player.adWinRate %>"
                                data-ad-rate="<%= player.adRate %>"
                                data-weighted-diff="<%= player.weightedDiff %>">
                                <td><strong><%= player.name %></strong></td>
                                <td><%= player.matches %></td>
                                <td>
                                    <span>
                                    <% if (player.winRate > 50) { %><strong><%= player.winRate %>%</strong><% } else { %><%= player.winRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-deuce">
                                    <% if (player.deuceRate > 50) { %><strong><%= player.deuceRate %>%</strong><% } else { %><%= player.deuceRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-deuce">
                                    <% if (player.deuceWinRate > 50) { %><strong><%= player.deuceWinRate %>%</strong><% } else { %><%= player.deuceWinRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-ad">
                                    <% if (player.adRate > 50) { %><strong><%= player.adRate %>%</strong><% } else { %><%= player.adRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="text-ad">
                                    <% if (player.adWinRate > 50) { %><strong><%= player.adWinRate %>%</strong><% } else { %><%= player.adWinRate %>%<% } %>
                                    </span>
                                </td>
                                <td>
                                    <span class="<%= player.weightedDiff > 0 ? 'diff-plus' : (player.weightedDiff < 0 ? 'diff-minus' : '') %>">
                                        <%= player.weightedDiff > 0 ? '+' : '' %><%= player.weightedDiff %>%
                                    </span>
                                </td>
                                <td><i class="bi bi-chevron-right text-muted"></i></td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="9" class="text-center p-5">표시할 데이터가 없습니다.<br><small>필터 조건을 변경하거나 경기 기록을 추가해주세요.</small></td></tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <!-- 하단 네비게이션 -->
        <nav class="navbar bottom-nav">
            <div class="container d-flex justify-content-around">
                <a class="nav-link" href="/"><img src="/image/free-icon-tennis-8122941.png" alt="경기 기록" /> <span>경기 기록</span></a>
                <a class="nav-link active" href="/my-score"><img src="/image/free-icon-individual-11985530.png" alt="개인 스코어" /> <span>개인 스코어</span></a>
                <a class="nav-link" href="/chemistry"><img src="/image/free-icon-people-2118701.png" alt="상대와 케미" /> <span>상대와 케미</span></a>
            </div>
        </nav>
    </div>
    <div class="modal fade" id="playerDetailModal" tabindex="-1" aria-labelledby="playerDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="playerDetailModalLabel"><b><span id="modalPlayerName"></span></b></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="stat-item">
                        <span><strong>📊&nbsp; 전체</strong></span>
                        <span class="stat-value" id="modalTotalStats"></span>
                    </div>
                    <div class="stat-item">
                        <span id="modalDeuceTitle"></span>
                        <span class="stat-value" id="modalDeuceStats"></span>
                    </div>
                    <div class="stat-item">
                        <span id="modalAdTitle"></span>
                        <span class="stat-value" id="modalAdStats"></span>
                    </div>
                    <div class="stat-item">
                        <span><strong>⚖️&nbsp; 포-백 승리 가중치</strong></span>
                        <span class="stat-value" id="modalWinRateDiff"></span>
                    </div>
                    <div class="stat-item">
                        <span></span>
                        <span class="stat-value" id="modalTags"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/common-filter.js"></script>
    <script>
        function applyFilters(options = {}) {
            let filters = filterStorage.load();
            filters.types = Array.from(document.querySelectorAll('#typeFilter input:checked')).map(cb => cb.value);
            filters.courts = Array.from(document.querySelectorAll('#courtFilter input:checked')).map(cb => cb.value);
            if (options.period) filters.period = options.period;
            filterStorage.save(filters);

            const params = new URLSearchParams();
            params.set('period', filters.period);
            if (filters.types.length > 0) params.set('types', filters.types.join(','));
            if (filters.courts && filters.courts.length > 0) params.set('courts', filters.courts.join(','));
            
            window.location.href = `/my-score?${params.toString()}`;
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            const savedFilters = filterStorage.load();
            
            const currentParams = new URLSearchParams(window.location.search);
            const savedParams = new URLSearchParams();
            savedParams.set('period', savedFilters.period);
            if (savedFilters.types.length > 0) savedParams.set('types', savedFilters.types.join(','));
            if (savedFilters.courts && savedFilters.courts.length > 0) savedParams.set('courts', savedFilters.courts.join(','));

            if (currentParams.toString() !== savedParams.toString()) {
                window.location.replace(`/my-score?${savedParams.toString()}`);
                return;
            }

            const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ];
            const selectedPeriod = periods.find(p => p.value === savedFilters.period) || periods[3];
            document.getElementById('periodDropdownButton').textContent = `기간: ${selectedPeriod.text}`;
            document.querySelectorAll('#typeFilter input').forEach(cb => { if (savedFilters.types.includes(cb.value)) cb.checked = true; });
            if (savedFilters.courts) document.querySelectorAll('#courtFilter input').forEach(cb => { if (savedFilters.courts.includes(cb.value)) cb.checked = true; });
            
            updateCheckboxDropdownText('typeDropdownButton', 'typeFilter', '분류');
            updateCheckboxDropdownText('courtDropdownButton', 'courtFilter', '코트');
            
            defaultSortTable();
        });

        /**
         * 페이지 하단 네비게이션 링크를 업데이트하는 함수
         * localStorage에 저장된 값을 기준으로 링크의 href를 동적으로 생성합니다.
         */
        function updateNavLinks() {
            const navLinks = document.querySelectorAll('.bottom-nav .nav-link');
            const savedFilters = filterStorage.load(); // 저장된 필터 불러오기
            
            const paramsToCarry = new URLSearchParams();
            paramsToCarry.set('period', savedFilters.period);
            if (savedFilters.types.length > 0) paramsToCarry.set('types', savedFilters.types.join(','));
            if (savedFilters.courts.length > 0) paramsToCarry.set('courts', savedFilters.courts.join(','));

            navLinks.forEach(link => {
                const targetUrl = new URL(link.href, window.location.origin);
                const finalParams = new URLSearchParams(paramsToCarry);

                if (targetUrl.pathname === '/chemistry' && savedFilters.player) {
                    finalParams.set('player', savedFilters.player);
                }
                
                link.href = `${targetUrl.pathname}?${finalParams.toString()}`;
            });
        }

        const currentParams = new URLSearchParams(window.location.search);
        
        const sortState = { columnIndex: 1, ascending: false };
        function sortTable(columnIndex) {
            const table = document.getElementById('scoreTable');
            const tbody = table.querySelector('tbody');
            if (tbody.rows.length <= 1 && tbody.rows[0].cells.length <= 1) { return; }
            const rows = Array.from(tbody.querySelectorAll('tr'));
            if (sortState.columnIndex === columnIndex) { sortState.ascending = !sortState.ascending; } else { sortState.columnIndex = columnIndex; sortState.ascending = false; }
            rows.sort((rowA, rowB) => {
                const cellA = rowA.cells[columnIndex];
                const cellB = rowB.cells[columnIndex];
                let valA, valB;
                if (columnIndex === 0) {
                    valA = cellA.innerText.trim();
                    valB = cellB.innerText.trim();
                    return sortState.ascending ? valA.localeCompare(valB) : valB.localeCompare(valA);
                } else {
                    valA = parseFloat(cellA.innerText.replace(/%|\+/g, '').trim());
                    valB = parseFloat(cellB.innerText.replace(/%|\+/g, '').trim());
                    if (isNaN(valA)) valA = -Infinity;
                    if (isNaN(valB)) valB = -Infinity;
                    return sortState.ascending ? valA - valB : valB - valA;
                }
            });
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }

        /**
         * 페이지 로드/필터 변경 시 개인 스코어 테이블의 기본 정렬을 적용하는 함수.
         * 정렬 우선순위: 1.경기수(내림) > 2.승률(내림)
         */
        function defaultSortTable() {
            const table = document.getElementById('scoreTable');
            const tbody = table.querySelector('tbody');
            if (!tbody || (tbody.rows.length <= 1 && tbody.rows[0].cells.length <= 1)) { return; }

            const rows = Array.from(tbody.querySelectorAll('tr'));

            // 셀의 텍스트에서 숫자 값만 추출하는 헬퍼 함수
            const getValue = (row, index) => {
                const text = row.cells[index].innerText.trim().replace(/%|\+/g, '');
                const value = parseFloat(text);
                return isNaN(value) ? -Infinity : value;
            };

            rows.sort((a, b) => {
                // 1. 경기수 (내림차순)
                const matchesA = getValue(a, 1);
                const matchesB = getValue(b, 1);
                if (matchesA !== matchesB) {
                    return matchesB - matchesA;
                }

                // 2. 승률 (내림차순)
                const winRateA = getValue(a, 2);
                const winRateB = getValue(b, 2);
                return winRateB - winRateA;
            });

            // 정렬된 순서대로 행을 다시 추가
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }

        // 플레이어 상세 정보 모달을 보여주는 함수
        let detailModal = null; // 모달 인스턴스를 저장할 변수
        function showPlayerDetails(rowElement) {
            const dataset = rowElement.dataset;

            // 데이터셋에서 모든 기록을 정수형으로 추출
            const name = dataset.name;
            const matches = parseInt(dataset.matches);
            const wins = parseInt(dataset.wins);
            const losses = parseInt(dataset.losses);
            const draws = parseInt(dataset.draws);
            const winRate = parseInt(dataset.winRate);

            const deuceMatches = parseInt(dataset.deuceMatches);
            const deuceWins = parseInt(dataset.deuceWins);
            const deuceLosses = parseInt(dataset.deuceLosses);
            const deuceDraws = parseInt(dataset.deuceDraws);
            const deuceWinRate = parseInt(dataset.deuceWinRate);
            const deuceRate = parseInt(dataset.deuceRate);

            const adMatches = parseInt(dataset.adMatches);
            const adWins = parseInt(dataset.adWins);
            const adLosses = parseInt(dataset.adLosses);
            const adDraws = parseInt(dataset.adDraws);
            const adWinRate = parseInt(dataset.adWinRate);
            const adRate = parseInt(dataset.adRate);

            // [수정] 올바른 dataset 속성 이름으로 데이터 추출
            const weightedDiff = parseInt(dataset.weightedDiff);
            
            // --- 조건부 텍스트 생성을 위한 로직 ---
            const drawsText = draws > 0 ? `${draws}무 ` : '';
            const deuceDrawsText = deuceDraws > 0 ? `${deuceDraws}무 ` : '';
            const adDrawsText = adDraws > 0 ? `${adDraws}무 ` : '';

            const winRateText = winRate > 50 ? `<strong>(${winRate}%)</strong>` : `(${winRate}%)`;
            const deuceWinRateText = deuceWinRate > 50 ? `<strong>(${deuceWinRate}%)</strong>` : `(${deuceWinRate}%)`;
            const adWinRateText = adWinRate > 50 ? `<strong>(${adWinRate}%)</strong>` : `(${adWinRate}%)`;

            const deuceRateText = deuceRate > 50 ? `<strong>${deuceRate}%</strong>` : `${deuceRate}%`;
            const adRateText = adRate > 50 ? `<strong>${adRate}%</strong>` : `${adRate}%`;
            
            const tags = [];
            if (deuceRate > adRate) {
                tags.push('#포많이하는');
            } else if (adRate > deuceRate) {
                tags.push('#백많이하는');
            }
            if (deuceWinRate > adWinRate) {
                tags.push('#포잡이');
            } else if (adWinRate > deuceWinRate) {
                tags.push('#백잡이');
            }
            const tagsText = tags.join(' ');
            // --- 로직 수정 끝 ---


            // 모달 내부 요소에 데이터 채우기
            document.getElementById('modalPlayerName').textContent = name;
            
            document.getElementById('modalDeuceTitle').innerHTML = `<span class="text-deuce"><strong>🫱&nbsp; 포 비율</strong> ${deuceRateText}</span>`;
            document.getElementById('modalAdTitle').innerHTML = `<span class="text-ad"><strong>🫲&nbsp; 백 비율</strong> ${adRateText}</span>`;

            document.getElementById('modalTotalStats').innerHTML = `${matches}전 ${wins}승 ${drawsText}${losses}패 ${winRateText}`;
            document.getElementById('modalDeuceStats').innerHTML = `<span class="text-deuce">${deuceMatches}전 ${deuceWins}승 ${deuceDrawsText}${deuceLosses}패 ${deuceWinRateText}</span>`;
            document.getElementById('modalAdStats').innerHTML = `<span class="text-ad">${adMatches}전 ${adWins}승 ${adDrawsText}${adLosses}패 ${adWinRateText}</span>`;
            
            document.querySelector('#modalWinRateDiff').previousElementSibling.innerHTML = `<strong>⚖️&nbsp; 포-백 승리 가중치</strong>`;
            const diffClass = weightedDiff > 0 ? 'diff-plus' : (weightedDiff < 0 ? 'diff-minus' : '');
            const diffSign = weightedDiff > 0 ? '+' : '';
            // [수정] 표시 내용에서 % 기호 제거
            document.getElementById('modalWinRateDiff').innerHTML = `<span class="${diffClass}">${diffSign}${weightedDiff}%</span>`;
            
            document.getElementById('modalTags').textContent = tagsText;

            // 모달 인스턴스가 없으면 생성하고, 있으면 재사용
            if (!detailModal) {
                detailModal = new bootstrap.Modal(document.getElementById('playerDetailModal'));
            }
            detailModal.show();
        }

    </script>
</body>
</html>
