<!DOCTYPE html>
<html lang="ko">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" href="/image/btw.png" />
    <link rel="icon" type="image/png" href="/image/btw.png" />
    <link rel="stylesheet" href="/css/common.css" />
    <title>불꽃테니스</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        .app-container {
            overflow: hidden;
        }
        .content-area {
            flex-grow: 1;
            overflow-y: auto;
        }
        .header-select {
            max-width: 160px;
            font-size: 0.8rem;
        }
        .nav {
            font-size: 0.9rem
        }
        .bracket-table-wrapper {
            /* width: 100%; */
            padding: 0 8px 10px 8px;
        }
        .bracket-table-wrapper {
            /* width: 100%; */
            padding: 0 5px 5px 5px;
            overflow-x: auto; /* 가로 스크롤을 다시 추가합니다. */
        }
        .bracket-table {
            font-size: 0.8rem;
            /* width: 100%; */
            min-width: 100%;
            table-layout: fixed;
            margin: 0 auto;
        }
        .bracket-table th,
        .bracket-table td {
            text-align: center;
            vertical-align: middle;
            border: 1px solid #dee2e6;
            word-break: keep-all;
            white-space: nowrap;
            /* height: 100px; */
        }
        .bracket-table th {
            background-color: #f8f9fa;
        }
        .bracket-table th:first-child,
        .bracket-table td:first-child {
            width: 30px;
            font-weight: bold;
            background-color: #f8f9fa;
        }
        .match-cell {
            cursor: pointer;
            padding: 4px !important;
            /* min-width: 100px; */
            height: 45px;
        }
        .match-cell:hover {
            background-color: #e9ecef;
        }
        .team-info {
            display: flex;
            align-items: center;
            padding: 2px 4px;
        }
        .players {
            text-align: center;
            flex: 3;
        }
        .score {
            text-align: center;
            font-weight: bold;
            flex: 1;
            padding-left: 5px;
        }
        .winner-bg { background-color: #EBF7FF !important; }
        .loser-bg { background-color: #FFEAEA !important; }
        .compact-view { display: none; }
        .show-compact .compact-view { display: block; }
        .show-compact .full-view { display: none; }
        #player-score-table th { cursor: pointer; }
        #player-score-table .odd-row td { background-color: #ffffff; }
        #player-score-table .even-row td { background-color: #f5f5f5; }
        .table-responsive {
            font-size: 0.8rem;
            text-align: center;
        }
        .modal-body * {
			font-size: 0.9rem;
		}
		.app-container .btn-sm {
			font-size: 0.8rem;
		}
        .win, .plus { color: darkblue !important; }
        .lose, .minus { color: darkred !important; }
        #deleteMatchRecordBtn {
            display: none;
        }
        /* .search {
            background-color: #FFF387 !important;
        } */
    </style>
</head>

<body>
    <div class="app-container">
        <div class="d-flex align-items-center sticky-header">
            <div class="d-flex align-items-center flex-grow-1">
                <a href="/schedule">
                    <img src="/image/btw-tran-180x180.png" alt="로고" style="height: 35px; margin-right: 5px;">
                </a>
                <a href="javascript:location.reload()" style="color: black; text-decoration: none;">
                    <h5 style="margin-bottom: 0;"><b>리그ㆍ교류전</b></h5>
                </a>
            </div>
            <div class="d-flex align-items-center">
                <select id="scheduleSelector" class="form-select form-select-sm header-select me-2">
                    <% schedules.forEach(s => { %>
                        <option value="<%= s.id %>" <%= selectedSchedule && selectedSchedule.id == s.id ? 'selected' : '' %>>
                            <%= s.schedule_date.substring(2) %> <%= s.notes %>
                        </option>
                    <% }); %>
                </select>
                <i class="bi bi-list hamburger-icon"></i>
            </div>
        </div>

        <%- include('partials/sidemenu') %>

        <% if (selectedSchedule) { %>
        <ul class="nav nav-tabs nav-fill px-2" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="bracket-tab" data-bs-toggle="tab" data-bs-target="#bracket-pane" type="button" role="tab">대진표</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="score-tab" data-bs-toggle="tab" data-bs-target="#score-pane" type="button" role="tab">개인 스코어</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="videographer-tab" data-bs-toggle="tab" data-bs-target="#videographer-pane" type="button" role="tab">촬영담당</button>
            </li>
        </ul>

        <div class="tab-content content-area" id="myTabContent">
            <div class="tab-pane fade show active" id="bracket-pane" role="tabpanel">
                <div class="p-2 d-flex justify-content-between align-items-center">
                    <div>
                        <select class="form-select form-select-sm" id="playerHighlighter" style="width: 120px;">
                            <option value="">선수 찾기</option>
                            <% if (participatingPlayers) { %>
                                <% participatingPlayers.forEach(player => { %>
                                    <option value="<%= player %>"><%= player %></option>
                                <% }) %>
                            <% } %>
                        </select>
                    </div>
                    <div class="p-2 text-end">
                        <div class="form-check form-switch d-inline-flex flex-row-reverse align-items-center">
                            <input class="form-check-input" type="checkbox" role="switch" id="opponentToggle">
                            <label class="form-check-label small me-5" for="opponentToggle" style="cursor: pointer;">상대팀 보기</label>
                        </div>
                    </div>
                </div>
                <div class="bracket-table-wrapper">
                    <table class="bracket-table" id="bracketTable">
                        <thead>
                            <tr>
                                <th></th>
                                <% for (let court = 1; court <= selectedSchedule.total_court_num; court++) { %>
                                    <th><%= court %>코트</th>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <% for (let round = 1; round <= selectedSchedule.total_round_num; round++) { %>
                                <tr>
                                    <td><%= round %>R</td>
                                    <% for (let court = 1; court <= selectedSchedule.total_court_num; court++) { 
                                        const match = matchData[round] && matchData[round][court] ? matchData[round][court] : null;
                                    %>
                                    <td class="match-cell"
                                        data-schedule-id="<%= selectedSchedule.id %>"
                                        data-round="<%= round %>"
                                        data-court="<%= court %>"
                                        data-match="<%= match ? encodeURIComponent(JSON.stringify(match)) : '' %>">
                                        
                                        <% if (match) { 
                                            // [수정] 무승부 처리를 위한 배경색 로직
                                            let team1_bg = '', team2_bg = '', compact_bg = '';
                                            const t1s = parseInt(match.team1_score);
                                            const t2s = parseInt(match.team2_score);
                                            if (t1s > t2s) {
                                                team1_bg = 'winner-bg'; team2_bg = 'loser-bg'; compact_bg = 'winner-bg';
                                            } else if (t2s > t1s) {
                                                team1_bg = 'loser-bg'; team2_bg = 'winner-bg'; compact_bg = 'loser-bg';
                                            }
                                        %>
                                            <div class="full-view">
                                                <div class="team-info <%= team1_bg %>">
                                                    <div class="players">
                                                        <span><%- stylePlayerName(match.team1_deuce, genderMap) %></span>
                                                        <% if (selectedSchedule.total_court_num >= 4) { %><br><% } %>
                                                        <span><%- stylePlayerName(match.team1_ad, genderMap) %></span>
                                                    </div>
                                                    <div class="score"><%= match.team1_score %></div>
                                                </div>
                                                <div class="team-info <%= team2_bg %>">
                                                    <div class="players">
                                                        <span><%- stylePlayerName(match.team2_deuce, genderMap) %></span>
                                                        <% if (selectedSchedule.total_court_num >= 4) { %><br><% } %>
                                                        <span><%- stylePlayerName(match.team2_ad, genderMap) %></span>
                                                    </div>
                                                    <div class="score"><%= match.team2_score %></div>
                                                </div>
                                            </div>
                                            <div class="compact-view <%= compact_bg %>">
                                                <div>
                                                    <span><%- stylePlayerName(match.team1_deuce, genderMap) %></span>
                                                    <span><%- stylePlayerName(match.team1_ad, genderMap) %></span>
                                                </div>
                                                <div><b><%= match.team1_score %></b> : <%= match.team2_score %></div>
                                            </div>
                                        <% } %>
                                    </td>
                                    <% } %>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                <div class="p-2">
                    <h6><b>개인별 경기수</b></h6>
                    <div class="table-responsive">
                        <table class="table table-sm table-hover text-center" id="player-match-count-table">
                            <thead class="table-light">
                                <tr>
                                    <th onclick="sortMatchCountTable(0, 'string')">이름 <i class="bi bi-arrow-down-up"></i></th>
                                    <th onclick="sortMatchCountTable(1, 'number')">진행 경기 <i class="bi bi-arrow-down-up"></i></th>
                                    <th onclick="sortMatchCountTable(2, 'number')">예정 경기 <i class="bi bi-arrow-down-up"></i></th>
                                    <th onclick="sortMatchCountTable(3, 'number')">총 경기 <i class="bi bi-arrow-down-up"></i></th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (playerMatchCounts) { %>
                                    <% playerMatchCounts.forEach(player => { %>
                                        <tr data-player-name="<%= player.name %>">
                                            <td><%- stylePlayerName(player.name, genderMap) %></td>
                                            <td><%= player.completed %></td>
                                            <td><%= player.scheduled %></td>
                                            <td><%= player.total %></td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="videographer-pane" role="tabpanel">
                 <div class="bracket-table-wrapper mt-2">
                    <table class="bracket-table">
                        <thead>
                            <tr>
                                <th></th>
                                <% for (let court = 1; court <= selectedSchedule.total_court_num; court++) { %>
                                    <th><%= court %>코트</th>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                             <% for (let round = 1; round <= selectedSchedule.total_round_num; round++) { %>
                                <tr>
                                    <td><%= round %>R</td>
                                    <% for (let court = 1; court <= selectedSchedule.total_court_num; court++) { 
                                        const match = matchData[round] && matchData[round][court] ? matchData[round][court] : null;
                                    %>
                                    <td class="match-cell videographer-cell"
                                        data-schedule-id="<%= selectedSchedule.id %>"
                                        data-round="<%= round %>"
                                        data-court="<%= court %>"
                                        data-match="<%= match ? encodeURIComponent(JSON.stringify(match)) : '' %>">
                                        <% if (match && match.videographer) { %>
                                            <%- stylePlayerName(match.videographer, genderMap) %>
                                        <% } %>
                                    </td>
                                    <% } %>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="tab-pane fade" id="score-pane" role="tabpanel">
                <div class="p-2 d-flex justify-content-end align-items-center">
                    <label class="small me-2" for="scoreOpponentToggle" style="cursor: pointer;">상대팀 보기</label>
                    <div class="form-check form-switch m-0">
                        <input class="form-check-input" type="checkbox" role="switch" id="scoreOpponentToggle">
                    </div>
                </div>
                <div class="table-responsive p-2">
                    <table class="table table-sm table-hover" id="player-score-table">
                        <thead class="table-light" style="position: sticky; top: 0;">
                            <tr>
                                <th onclick="sortTable(0, 'number')">순위 <i class="bi bi-arrow-down-up"></i></th>
                                <th onclick="sortTable(1, 'string')">이름 <i class="bi bi-arrow-down-up"></i></th>
                                <th onclick="sortTable(2, 'number')">경기수 <i class="bi bi-arrow-down-up"></i></th>
                                <th onclick="sortTable(3, 'number')">승 <i class="bi bi-arrow-down-up"></i></th>
                                <th onclick="sortTable(4, 'number')">패 <i class="bi bi-arrow-down-up"></i></th>
                                <th onclick="sortTable(5, 'number')">승점 <i class="bi bi-arrow-down-up"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% playerStats.forEach(player => { %>
                            <tr data-player-name="<%= player.name %>">
                                <td><%= player.rank %></td>
                                <td><%- stylePlayerName(player.name, genderMap) %></td>
                                <td><%= player.matches %></td>
                                <td class = "win"><%= player.wins %></td>
                                <td class = "lose"><%= player.losses %></td>
                                <td class = "<%= player.points > 0 ? 'plus' : 'minus' %>"><%= player.points > 0 ? '+' : '' %><%= player.points %></td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <% } else { %>
            <div class="content-area d-flex justify-content-center align-items-center">
                <div class="text-center text-muted">
                    <i class="bi bi-calendar-x" style="font-size: 3rem;"></i>
                    <p class="mt-2">상단에서 일정을 선택해주세요.</p>
                </div>
            </div>
        <% } %>

        <%- include('partials/navbar', { currentPage: 'special-match' }) %>
    </div>
    
    <div class="modal fade" id="matchRecordModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered" style="align-items: start;">
			<div class="modal-content" style="margin-top: 50px;">
				<form id="matchRecordForm">
					<div class="modal-header">
						<h6 class="modal-title"><b>경기 기록</b></h6>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<datalist id="modal-player-list"></datalist>
						<input type="hidden" name="id">
						<input type="hidden" name="schedule_id">
						<input type="hidden" name="round_num">
						<input type="hidden" name="court_num">

						<div class="border p-3 rounded">
							<div class="row">
								<div class="col text-center">
									<label class="form-label small">듀스코트(포)</label>
                                    <input type="text" class="form-control" id="team1_deuce" name="team1_deuce" list="modal-player-list" required>
								</div>
                                <div class="col-auto d-flex align-items-end p-0">
                                    <button type="button" class="btn swap-btn px-0" data-team="1">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </button>
                                </div>
								<div class="col text-center">
									<label class="form-label small">애드코트(백)</label>
                                    <input type="text" class="form-control" id="team1_ad" name="team1_ad" list="modal-player-list">
								</div>
								<div class="col-auto text-center">
									<label class="form-label small">스코어</label>
									<select class="form-select text-center" name="team1_score">
										<% for(let i=0; i <=7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
									</select>
								</div>
							</div>
						</div>
						<div class="text-center fw-bold my-2">VS</div>
						<div class="border p-3 rounded">
							<div class="row">
								<div class="col text-center">
									<label class="form-label small">듀스코트(포)</label>
                                    <input type="text" class="form-control" id="team2_deuce" name="team2_deuce" list="modal-player-list" required>
								</div>
                                <div class="col-auto d-flex align-items-end p-0">
                                    <button type="button" class="btn swap-btn px-0" data-team="2">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </button>
                                </div>
								<div class="col text-center">
									<label class="form-label small">애드코트(백)</label>
                                    <input type="text" class="form-control" id="team2_ad" name="team2_ad" list="modal-player-list">
								</div>
								<div class="col-auto text-center">
									<label class="form-label small">스코어</label>
									<select class="form-select text-center" name="team2_score">
										<% for(let i=0; i <=7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
									</select>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-sm btn-danger me-auto" id="deleteMatchRecordBtn">삭제</button>
						<button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">취소</button>
						<button type="button" class="btn btn-sm btn-primary" id="saveMatchRecordBtn">저장</button>
					</div>
				</form>
			</div>
		</div>
	</div>

    <div class="modal fade" id="videographerModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title"><b>촬영담당 지정</b></h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="videographerMatchId">
                    <input type="hidden" id="videographerScheduleId">
                    <input type="hidden" id="videographerRound">
                    <input type="hidden" id="videographerCourt">
                    <label for="videographerName" class="form-label">이름</label>
                    <input type="text" class="form-control" id="videographerName" list="modal-player-list" placeholder="촬영담당자 이름 입력">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">취소</button>
                    <button type="button" class="btn btn-sm btn-primary" id="saveVideographerBtn">저장</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // URL 파라미터를 관리하는 함수
        function reloadWithActiveTab(tabName) {
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('active_tab', tabName);
            window.location.href = currentUrl.toString();
        }

        function populatePlayerDatalist() {
            const datalist = document.getElementById('modal-player-list');
            // 목록이 이미 채워져 있으면 다시 실행하지 않음
            if (datalist.options.length > 0) {
                return;
            }
            const playerNames = JSON.parse('<%- selectedSchedule && allPlayers ? JSON.stringify(allPlayers.map(p => p.name)) : "[]" %>');
            playerNames.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                datalist.appendChild(option);
            });
        }

        // 개인 스코어 테이블 스트라이프 적용 함수
        function restripeScoreTable() {
            const tbody = document.querySelector("#player-score-table tbody");
            if (!tbody) return;
            // 필터링되어 보이는 행만 대상으로 스트라이프를 다시 적용합니다.
            const visibleRows = tbody.querySelectorAll("tr[style='']");
            
            let visibleIndex = 0;
            tbody.querySelectorAll("tr").forEach((row) => {
                row.classList.remove('odd-row', 'even-row');
                if (row.style.display !== 'none') {
                    if (visibleIndex % 2 !== 0) {
                        row.classList.add('even-row');
                    } else {
                        row.classList.add('odd-row');
                    }
                    visibleIndex++;
                }
            });
        }

        function clearInputValue(inputId) {
            const inputElement = document.getElementById(inputId);
            if (inputElement) {
                inputElement.value = '';
            }
        }
        let sortState = {
            columnIndex: 0, // 기본 정렬: 6번째 컬럼인 '승점'
            direction: 'asc' // 기본 정렬 방향: 내림차순
        };
        let matchCountSortState = {
            columnIndex: 3, // 기본 정렬: '총 경기'
            direction: 'desc' // 기본 방향: 내림차순
        };

        document.addEventListener('DOMContentLoaded', function () {
            // --- 초기화 ---
            const matchRecordModal = new bootstrap.Modal(document.getElementById('matchRecordModal'));
            const videographerModal = new bootstrap.Modal(document.getElementById('videographerModal'));
            const playerHighlighter = document.getElementById('playerHighlighter');

            if (playerHighlighter) {
                playerHighlighter.addEventListener('change', function() {
                    const selectedPlayer = this.value;

                    // 1. 모든 셀에서 기존 하이라이트 효과를 먼저 제거합니다.
                    document.querySelectorAll('.full-view span, .compact-view span').forEach(span => {
                        span.classList.remove('search-highlight');
                    });

                    document.querySelectorAll('#player-match-count-table tbody tr td span').forEach(row => {
                        row.classList.remove('search-highlight');
                    });

                    // 2. 선수가 선택된 경우, full-view와 compact-view 모두에 강조 효과를 적용합니다.
                    if (selectedPlayer) {
                        document.querySelectorAll('.match-cell').forEach(cell => {
                            const matchDataStr = cell.dataset.match;
                            if (!matchDataStr) return;

                            const match = JSON.parse(decodeURIComponent(matchDataStr));
                            const playersInMatch = [match.team1_deuce, match.team1_ad, match.team2_deuce, match.team2_ad];

                            if (playersInMatch.includes(selectedPlayer)) {
                                // 해당 셀의 full-view와 compact-view 안의 모든 span을 대상으로 검색
                                cell.querySelectorAll('.full-view span, .compact-view span').forEach(span => {
                                    if (span.textContent === selectedPlayer) {
                                        span.classList.add('search-highlight');
                                    }
                                });
                            }
                        });

                        const rowToHighlight = document.querySelector(`#player-match-count-table tbody tr[data-player-name="${selectedPlayer}"] td span`);
                        if (rowToHighlight) {
                            rowToHighlight.classList.add('search-highlight');
                        }
                    }
                });

                // LocalStorage에서 선수 자동 선택
                const savedPlayer = localStorage.getItem('tennis-schedule-user');
                if (savedPlayer) {
                    // 드롭다운에 해당 선수가 있는지 확인
                    const optionExists = Array.from(playerHighlighter.options).some(option => option.value === savedPlayer);
                    if (optionExists) {
                        playerHighlighter.value = savedPlayer;
                        // 하이라이트 적용을 위해 change 이벤트 트리거
                        playerHighlighter.dispatchEvent(new Event('change'));
                    }
                }
            }
            
            // 일정 선택 드롭다운
            document.getElementById('scheduleSelector').addEventListener('change', function() {
                if (this.value) {
                    window.location.href = '/special-match?schedule_id=' + this.value;
                }
            });

            // 대진표 토글 상태 로드 및 이벤트 핸들러 설정
            const opponentToggle = document.getElementById('opponentToggle');
            const scoreOpponentToggle = document.getElementById('scoreOpponentToggle');
            const team1PlayerSet = new Set(JSON.parse('<%- JSON.stringify(team1Players || []) %>'));
            const toggleStateKey = 'opponentToggleState';

            const applyBracketToggleState = () => {
                const bracketTable = document.getElementById('bracketTable');
                const isChecked = opponentToggle.checked;

                // 1. 대진표 compact 모드 적용
                bracketTable.classList.toggle('show-compact', !isChecked);

                // 2. 개인별 경기수 테이블 필터링
                const matchCountTableRows = document.querySelectorAll('#player-match-count-table tbody tr');
                matchCountTableRows.forEach(row => {
                    if (isChecked) {
                        row.style.display = ''; // 켜져 있으면 모든 행 표시
                    } else {
                        // 꺼져 있으면 팀1 선수만 표시
                        const playerName = row.dataset.playerName;
                        row.style.display = team1PlayerSet.has(playerName) ? '' : 'none';
                    }
                });
            };

            const applyScoreToggleState = () => {
                const scoreTableRows = document.querySelectorAll('#player-score-table tbody tr');
                scoreTableRows.forEach(row => {
                    if (scoreOpponentToggle.checked) {
                        row.style.display = '';
                    } else {
                        const playerName = row.dataset.playerName;
                        row.style.display = team1PlayerSet.has(playerName) ? '' : 'none';
                    }
                });
                updatePlayerRanks();
                restripeScoreTable();
            };

            const syncAndUpdateToggles = (sourceToggle) => {
                const isChecked = sourceToggle.checked;
                localStorage.setItem(toggleStateKey, isChecked);
                if (opponentToggle && sourceToggle !== opponentToggle) opponentToggle.checked = isChecked;
                if (scoreOpponentToggle && sourceToggle !== scoreOpponentToggle) scoreOpponentToggle.checked = isChecked;
                applyBracketToggleState();
                applyScoreToggleState();
            };

            const savedState = localStorage.getItem(toggleStateKey);
            const initialState = savedState === null ? true : JSON.parse(savedState);
            if (opponentToggle) {
                opponentToggle.checked = initialState;
                opponentToggle.addEventListener('change', () => syncAndUpdateToggles(opponentToggle));
            }
            if (scoreOpponentToggle) {
                scoreOpponentToggle.checked = initialState;
                scoreOpponentToggle.addEventListener('change', () => syncAndUpdateToggles(scoreOpponentToggle));
            }
            applyBracketToggleState();
            applyScoreToggleState();

            if (document.getElementById('player-score-table')) {
                updateSortIcons();
                restripeScoreTable(); 
            }

            if (document.getElementById('player-match-count-table')) {
                updateMatchCountSortIcons();
                sortMatchCountTable(matchCountSortState.columnIndex, 'number', true);
            }

            // 페이지 로드 시 URL 파라미터를 확인하여 활성 탭 지정
            const urlParams = new URLSearchParams(window.location.search);
            const activeTab = urlParams.get('active_tab');
            if (activeTab) {
                const tabToActivate = document.getElementById(activeTab + '-tab');
                if (tabToActivate) {
                    const tab = new bootstrap.Tab(tabToActivate);
                    tab.show();
                }
            }

            // 모달 열기 이벤트
            document.querySelectorAll('#bracket-pane .match-cell').forEach(cell => {
                cell.addEventListener('click', () => openMatchRecordModal(cell, matchRecordModal));
            });
            document.querySelectorAll('#videographer-pane .match-cell').forEach(cell => {
                cell.addEventListener('click', () => openVideographerModal(cell, videographerModal));
            });
            
            // 모달 내 버튼 이벤트
            document.getElementById('saveMatchRecordBtn').addEventListener('click', () => saveMatchRecord(matchRecordModal));
            document.getElementById('deleteMatchRecordBtn').addEventListener('click', () => deleteMatchRecord(matchRecordModal));
            document.getElementById('saveVideographerBtn').addEventListener('click', () => saveVideographer(videographerModal));
            document.querySelectorAll('.swap-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const team = this.dataset.team;
                    const form = document.getElementById('matchRecordForm');
                    const deuceInput = form.querySelector(`[name="team${team}_deuce"]`);
                    const adInput = form.querySelector(`[name="team${team}_ad"]`);
                    const tempValue = deuceInput.value;
                    deuceInput.value = adInput.value;
                    adInput.value = tempValue;
                });
            });
            
            // 햄버거 메뉴
            const hamburger = document.querySelector('.hamburger-icon');
            const sideMenu = document.querySelector('.side-menu');
            const overlay = document.querySelector('.overlay');
            hamburger.addEventListener('click', () => {
                sideMenu.classList.toggle('active');
                overlay.classList.toggle('active');
            });
            overlay.addEventListener('click', () => {
                sideMenu.classList.remove('active');
                overlay.classList.remove('active');
            });
        });

        function updatePlayerRanks() {
            const scoreTableRows = Array.from(document.querySelectorAll('#player-score-table tbody tr'));
            const visibleRows = scoreTableRows.filter(row => row.style.display !== 'none');
            const playersToSort = visibleRows.map(row => ({
                rankCell: row.cells[0],
                points: parseFloat(row.cells[5].innerText.replace('+', ''))
            }));
            playersToSort.sort((a, b) => b.points - a.points);
            let rank = 1;
            for (let i = 0; i < playersToSort.length; i++) {
                if (i > 0 && playersToSort[i].points < playersToSort[i - 1].points) {
                    rank = i + 1;
                }
                playersToSort[i].rankCell.innerText = rank;
            }
        }

        async function saveMatchRecord(modalInstance) {
            const form = document.getElementById('matchRecordForm');
            if (!form.reportValidity()) return; // HTML5 required 속성 검사
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            if (!data.team1_deuce || !data.team2_deuce) {
                alert('각 팀의 듀스코트(포핸드) 선수는 필수 입력 항목입니다.');
                return;
            }
            try {
                const response = await fetch('/api/special-match/record', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success) {
                    modalInstance.hide();
                    reloadWithActiveTab('bracket')
                } else {
                    alert(result.message || '저장에 실패했습니다.');
                }
            } catch (error) {
                alert('오류가 발생했습니다: ' + error.message);
            }
        }

        function openMatchRecordModal(cell, modalInstance) {
            populatePlayerDatalist(); // 선수 목록 생성 함수 호출

            const form = document.getElementById('matchRecordForm');
            form.reset();
            const matchDataStr = cell.dataset.match;
            const match = matchDataStr ? JSON.parse(decodeURIComponent(matchDataStr)) : null;
            const playerNames = JSON.parse('<%- selectedSchedule && allPlayers ? JSON.stringify(allPlayers.map(p => p.name)) : "[]" %>');
            const datalist = document.getElementById('modal-player-list');
            datalist.innerHTML = '';
            playerNames.forEach(name => {
                const option = document.createElement('option');
                option.value = name;
                datalist.appendChild(option);
            });
            form.querySelector('[name="schedule_id"]').value = cell.dataset.scheduleId;
            form.querySelector('[name="round_num"]').value = cell.dataset.round;
            form.querySelector('[name="court_num"]').value = cell.dataset.court;
            if (match) {
                form.querySelector('[name="id"]').value = match.id || '';
                form.querySelector('[name="team1_deuce"]').value = match.team1_deuce || '';
                form.querySelector('[name="team1_ad"]').value = match.team1_ad || '';
                form.querySelector('[name="team1_score"]').value = match.team1_score || 0;
                form.querySelector('[name="team2_deuce"]').value = match.team2_deuce || '';
                form.querySelector('[name="team2_ad"]').value = match.team2_ad || '';
                form.querySelector('[name="team2_score"]').value = match.team2_score || 0;
                // document.getElementById('deleteMatchRecordBtn').style.display = 'block';
            } else {
                document.getElementById('deleteMatchRecordBtn').style.display = 'none';
            }
            modalInstance.show();
        }
        
        function openVideographerModal(cell, modalInstance) {
            populatePlayerDatalist(); // 선수 목록 생성 함수 호출
            
            const matchDataStr = cell.dataset.match;
            const match = matchDataStr ? JSON.parse(decodeURIComponent(matchDataStr)) : null;
            document.getElementById('videographerMatchId').value = match ? match.id : '';
            document.getElementById('videographerScheduleId').value = cell.dataset.scheduleId;
            document.getElementById('videographerRound').value = cell.dataset.round;
            document.getElementById('videographerCourt').value = cell.dataset.court;
            document.getElementById('videographerName').value = match ? match.videographer || '' : '';
            modalInstance.show();
        }

        async function deleteMatchRecord(modalInstance) {
            if (!confirm('정말로 이 경기 기록을 삭제하시겠습니까?')) return;
            const form = document.getElementById('matchRecordForm');
            const matchId = form.querySelector('[name="id"]').value;
            if (!matchId) {
                alert('삭제할 경기 기록이 없습니다.');
                return;
            }
            try {
                const response = await fetch('/api/special-match/record', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: matchId })
                });
                const result = await response.json();
                if (result.success) {
                    modalInstance.hide();
                    reloadWithActiveTab('bracket');
                } else {
                    alert(result.message || '삭제에 실패했습니다.');
                }
            } catch (error) {
                alert('오류가 발생했습니다: ' + error.message);
            }
        }

        async function saveVideographer(modalInstance) {
            const data = {
                id: document.getElementById('videographerMatchId').value,
                schedule_id: document.getElementById('videographerScheduleId').value,
                round_num: document.getElementById('videographerRound').value,
                court_num: document.getElementById('videographerCourt').value,
                videographer: document.getElementById('videographerName').value
            };
            try {
                const response = await fetch('/api/special-match/videographer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (result.success) {
                    modalInstance.hide();
                    reloadWithActiveTab('videographer');
                } else {
                    alert(result.message || '저장에 실패했습니다.');
                }
            } catch (error) {
                alert('오류가 발생했습니다: ' + error.message);
            }
        }
        
        const genderMap = JSON.parse('<%- JSON.stringify(genderMap || {}) %>');
        const stylePlayerName = (playerName, genderMap) => {
            if (!playerName) return ''; 
            const gender = genderMap[playerName];
            let genderClass = '';
            if (gender === '남') genderClass = 'text-male';
            else if (gender === '여') genderClass = 'text-female';
            if (genderClass) {
            return `<span class="${genderClass}">${playerName}</span>`;
            }
            return playerName;
        };

        // 정렬 아이콘을 업데이트하는 함수
        function updateSortIcons() {
            document.querySelectorAll('#player-score-table th i').forEach((icon, index) => {
                // 모든 아이콘을 기본값으로 초기화
                icon.className = 'bi bi-arrow-down-up';
                // 현재 정렬 중인 컬럼의 아이콘만 변경
                if (index === sortState.columnIndex) {
                    icon.className = sortState.direction === 'asc' ? 'bi bi-sort-up' : 'bi bi-sort-down';
                }
            });
        }

        // 테이블 정렬 함수
        function sortTable(columnIndex, type) {
            const table = document.getElementById('player-score-table');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            // 정렬 상태 업데이트
            if (sortState.columnIndex === columnIndex) {
                // 같은 컬럼을 다시 클릭하면 방향 전환
                sortState.direction = sortState.direction === 'asc' ? 'desc' : 'asc';
            } else {
                // 다른 컬럼을 클릭하면 해당 컬럼으로 변경하고 기본 방향 설정
                sortState.columnIndex = columnIndex;
                sortState.direction = (type === 'number') ? 'desc' : 'asc';
            }

            // 데이터 정렬
            rows.sort((a, b) => {
                const valA = a.cells[columnIndex].innerText.trim();
                const valB = b.cells[columnIndex].innerText.trim();
                let compareA, compareB;

                if (type === 'number') {
                    compareA = parseFloat(valA.replace('+', ''));
                    compareB = parseFloat(valB.replace('+', ''));
                } else {
                    compareA = valA;
                    compareB = valB;
                }
                
                if (compareA < compareB) return sortState.direction === 'asc' ? -1 : 1;
                if (compareA > compareB) return sortState.direction === 'asc' ? 1 : -1;
                return 0;
            });

            // 정렬된 행을 다시 테이블에 추가
            rows.forEach(row => tbody.appendChild(row));
            
            restripeScoreTable();

            // 아이콘 상태 업데이트
            updateSortIcons();
        }

        function updateMatchCountSortIcons() {
            document.querySelectorAll('#player-match-count-table th i').forEach((icon, index) => {
                icon.className = 'bi bi-arrow-down-up';
                if (index === matchCountSortState.columnIndex) {
                    icon.className = matchCountSortState.direction === 'asc' ? 'bi bi-sort-up' : 'bi bi-sort-down';
                }
            });
        }

        function sortMatchCountTable(columnIndex, type, isInitialSort = false) {
            const table = document.getElementById('player-match-count-table');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            if (!isInitialSort) {
                if (matchCountSortState.columnIndex === columnIndex) {
                    matchCountSortState.direction = matchCountSortState.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    matchCountSortState.columnIndex = columnIndex;
                    matchCountSortState.direction = (type === 'number') ? 'desc' : 'asc';
                }
            }

            rows.sort((a, b) => {
                const valA = a.cells[columnIndex].innerText.trim();
                const valB = b.cells[columnIndex].innerText.trim();
                let compareA, compareB;
                if (type === 'number') {
                    compareA = parseFloat(valA);
                    compareB = parseFloat(valB);
                } else {
                    compareA = valA;
                    compareB = valB;
                }
                if (compareA < compareB) return matchCountSortState.direction === 'asc' ? -1 : 1;
                if (compareA > compareB) return matchCountSortState.direction === 'asc' ? 1 : -1;
                return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
            updateMatchCountSortIcons();
        }
    </script>
</body>
</html>