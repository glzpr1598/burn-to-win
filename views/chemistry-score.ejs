<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" href="/image/btw.png"/>
    <link rel="icon" type="image/png" href="/image/btw.png"/>
    <link rel="stylesheet" href="/css/common.css" />
    <title>불꽃테니스</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        .filter-section { position: static; z-index: 101; padding: 15px; background-color: #f8f9fa; border-bottom: 1px solid #eee; flex-shrink: 0; }
        .filter-section .dropdown-toggle { display: flex; justify-content: space-between; align-items: center; text-align: left; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .dropdown-menu { padding: .75rem; width: 100%; font-size: 0.8rem;}
        .dropdown-menu .checkbox-group { max-height: 250px; overflow-y: auto; margin-bottom: .5rem;}
        .filter-control-links { padding-bottom: .5rem; margin-bottom: .5rem; border-bottom: 1px solid #eee; }
        .filter-control-links a { font-size: .8rem; color: #6c757d; text-decoration: none; margin-left: 10px; }
        .table-responsive { flex-grow: 1; overflow-y: auto; }
        #scoreTable { font-size: 0.8rem; }
        #scoreTable th { position: sticky; top: 0; background-color: #f8f9fa; z-index: 90; }
        .sortable-th { cursor: pointer; }
        #searchContainer { display: none; width: 150px; }
        #searchInput { min-width: 100px; }
        #searchToggle .bi-search { font-size: 1.2rem; color: black; }
        /* 모달 스타일 추가 */
        .modal-body .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .modal-body .stat-item:last-child {
            border-bottom: none;
        }
        .modal-body .stat-value {
            text-align: right;
            font-size: 0.9rem;
        }
        .modal-body * {
            font-size: 0.9rem;
        }
        .modal-body .table * {
            font-size: 0.8rem;
        }
        .group-a-bg td { background-color: #ffffff; }
        .group-b-bg td { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="modal fade" id="matchDetailModal" tabindex="-1" aria-labelledby="matchDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="matchDetailModalLabel">경기 기록</h6>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="matchDetailModalBody" style="padding: 0;">
                    </div>
            </div>
        </div>
    </div>

    <div class="app-container">
        <div class="d-flex align-items-center justify-content-between sticky-header">
            <div class="d-flex align-items-center">
                <a href="/schedule">
                    <img src="/image/btw-tran-180x180.png" alt="로고" style="height: 40px; margin-right: 5px;">
                </a>
                <a href="/chemistry-score" style="color: black; text-decoration: none;">
                    <h5 style="margin-bottom: 0;"><b>케미 스코어</b></h5>
                </a>
            </div>
            <div class="d-flex align-items-center">
                <div id="searchContainer" class="input-group input-group-sm me-2">
                    <input type="text" id="searchInput" class="form-control" placeholder="페어 검색" />
                    <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn"><i class="bi bi-x-lg"></i></button>
                </div>
                <a href="#" id="searchToggle" class="me-3"><i class="bi bi-search"></i></a>
                <i class="bi bi-list hamburger-icon"></i>
            </div>
        </div>

        <%- include('partials/sidemenu') %>

        <div class="filter-section">
            <div class="row g-2">
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="periodDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">기간</button>
                        <ul class="dropdown-menu" aria-labelledby="periodDropdownButton">
                             <% const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ]; %>
                             <% periods.forEach(period => { %>
                                 <li><a class="dropdown-item" href="#" onclick="applyFilters({ period: '<%= period.value %>' })"><%= period.text %></a></li>
                             <% }) %>
                        </ul>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="typeDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">분류</button>
                        <div class="dropdown-menu" aria-labelledby="typeDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('typeFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('typeFilter'); return false;">전체해제</a></div>
                            <div id="typeFilter" class="checkbox-group">
                                 <% const types = ['남복', '여복', '혼복', '혼복(남3)', '혼복(여3)', '혼복(남vs여)']; %>
                                <% types.forEach(type => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= type %>" id="type-<%= type %>"><label class="form-check-label" for="type-<%= type %>"><%= type %></label></div>
                                <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="courtDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">코트</button>
                        <div class="dropdown-menu" aria-labelledby="courtDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('courtFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('courtFilter'); return false;">전체해제</a></div>
                            <div id="courtFilter" class="checkbox-group">
                                 <% courts.forEach(court => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= court.name %>" id="court-<%= court.name %>"><label class="form-check-label" for="court-<%= court.name %>"><%= court.name %></label></div>
                                 <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table id="scoreTable" class="table table-sm table-striped text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width: 29%;">페어</th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(1, 'num')">경기수 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(2, 'num')">승리 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(3, 'num')">패배 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 18%;" onclick="sortTable(4, 'num')">승률 <i class="bi bi-arrow-down-up"></i></th>
                        <th style="width: 5%;"></th> </tr>
                </thead>
                <tbody id="scoreTbody">
                    <% if (pairData && pairData.length > 0) { %>
                        <% pairData.forEach(item => { %>
                            <tr data-pair="<%= item.pairKey %>" style="cursor: pointer;" onclick="showMatchDetails(this)">
                                <td>
                                    <% item.players.forEach((player, index) => { %>
                                        <% const color = player.gender === '남' ? '#ddffff' : (player.gender === '여' ? '#ffffdd' : 'inherit'); %>
                                        <span style="--bg: <%= color %>; background-color: var(--bg);"><%= player.name %></span>
                                        <% if (index === 0) { %> 
                                            <span> </span>
                                        <% } %>
                                    <% }) %>
                                </td>
                                <td><%= item.matches %></td>
                                <td><%= item.wins %></td>
                                <td><%= item.losses %></td>
                                <% if (item.winRate > 50) { %>
                                    <td><strong><%= item.winRate %>%</strong></td>
                                <% } else { %>
                                    <td><%= item.winRate %>%</td>
                                <% } %>
                                <td><i class="bi bi-chevron-right text-muted"></i></td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="6" class="text-center p-5">표시할 데이터가 없습니다.<br><small>필터 조건을 변경하거나 경기 기록을 추가해주세요.</small></td></tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <%- include('partials/navbar', { currentPage: 'chemistry-score' }) %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/common-filter.js"></script>
    <script>
        function applyFilters(options = {}) {
            let filters = filterStorage.load();
            const singleTypes = filters.types.filter(t => t.includes('단'));
            const newDoubleTypes = Array.from(document.querySelectorAll('#typeFilter input:checked')).map(cb => cb.value);
            filters.types = [...new Set([...singleTypes, ...newDoubleTypes])];
            filters.courts = Array.from(document.querySelectorAll('#courtFilter input:checked')).map(cb => cb.value);
            if (options.period) filters.period = options.period;
            filterStorage.save(filters);

            const params = new URLSearchParams();
            params.set('period', filters.period);
            if (newDoubleTypes.length > 0) params.set('types', newDoubleTypes.join(','));
            if (filters.courts && filters.courts.length > 0) params.set('courts', filters.courts.join(','));
            
            window.location.href = `/chemistry-score?${params.toString()}`;
        }

        // --- 정렬 및 검색 로직 ---
        let sortState = { col: 4, asc: false };
        function sortTable(colIndex, type) {
            const tbody = document.getElementById("scoreTbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            if (rows.length <= 1 && rows[0].children.length <= 1) return;
            sortState.asc = (sortState.col === colIndex) ? !sortState.asc : true;
            sortState.col = colIndex;
            const direction = sortState.asc ? 1 : -1;
            rows.sort((a, b) => {
                let valA = a.children[colIndex].innerText.trim().replace('%', '');
                let valB = b.children[colIndex].innerText.trim().replace('%', '');
                return (parseFloat(valA) - parseFloat(valB)) * direction;
            });
            sortedRows = rows;

            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));
            document.querySelectorAll('#scoreTable th i').forEach((icon, index) => {
                const thIndex = icon.parentElement.cellIndex;
                icon.className = 'bi bi-arrow-down-up';
                if (thIndex === sortState.col) {
                    icon.className = sortState.asc ? 'bi bi-sort-up' : 'bi bi-sort-down';
                }
            });
        }

        function defaultSort() {
            const tbody = document.getElementById("scoreTbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            if (rows.length <= 1 && rows[0].children.length <= 1) return;
            rows.sort((a, b) => {
                const matchesA = parseFloat(a.children[1].innerText.trim());
                const matchesB = parseFloat(b.children[1].innerText.trim());
                if (matchesB !== matchesA) return matchesB - matchesA;

                const winRateA = parseFloat(a.children[4].innerText.trim().replace('%', ''));
                const winRateB = parseFloat(b.children[4].innerText.trim().replace('%', ''));
                return winRateB - winRateA;
            });
            sortedRows = rows;

            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));
            document.querySelectorAll('#scoreTable th i')[0].className = 'bi bi-sort-down';
        }
        
        let originalRows = [];
        let sortedRows = [];

        function filterTable() {
            const searchInput = document.getElementById('searchInput');
            const searchText = searchInput.value.toLowerCase().trim();
            const keywords = searchText.split(' ').filter(k => k);
            const tbody = document.getElementById('scoreTbody');
            tbody.innerHTML = '';

            // 'sortedRows'는 EJS에 의해 렌더링된, 스타일이 적용된 원본 TR 요소들의 배열입니다.
            sortedRows.forEach(row => {
                // 검색어 매칭은 기존처럼 스타일이 제거된 순수 텍스트로 진행합니다.
                const pairText = row.querySelector('td:first-child').innerText.toLowerCase();
                const isMatch = keywords.every(keyword => pairText.includes(keyword));

                if (isMatch) {
                    // 일치하는 경우, 스타일이 포함된 원본 행을 복제합니다.
                    const newRow = row.cloneNode(true);
                    newRow.addEventListener('click', () => showMatchDetails(newRow));

                    // ✨ 검색어가 있을 때만 하이라이트 로직을 실행합니다.
                    if (keywords.length > 0) {
                        const cell = newRow.querySelector('td:first-child');
                        const searchRegex = new RegExp(keywords.join('|'), 'gi');

                        // ✨ 중요: 셀 전체가 아닌, 배경색 스타일이 적용된 각 'span'을 찾아 처리합니다.
                        const nameSpans = cell.querySelectorAll('span[style]');
                        nameSpans.forEach(span => {
                            // span 태그와 스타일은 그대로 두고, 그 안의 텍스트에만 <strong> 태그를 적용합니다.
                            span.innerHTML = span.innerText.replace(searchRegex, '<strong>$&</strong>');
                        });
                    }
                    
                    tbody.appendChild(newRow);
                }
            });
        }

        const matchDetailModal = new bootstrap.Modal(document.getElementById('matchDetailModal'));
        
        async function showMatchDetails(rowElement) {
            const pair = rowElement.dataset.pair;
            const stats = {
                matches: rowElement.cells[1].innerText,
                wins: rowElement.cells[2].innerText,
                losses: rowElement.cells[3].innerText,
                winRate: parseFloat(rowElement.cells[4].innerText.replace('%', ''))
            };

            const currentFilters = new URLSearchParams(window.location.search);
            const period = currentFilters.get('period') || '6m';
            const types = currentFilters.get('types') || '남복,여복,혼복';
            const courts = currentFilters.get('courts') || '';

            try {
                const response = await fetch(`/api/matches/pair?pair=${encodeURIComponent(pair)}&period=${period}&types=${types}&courts=${courts}`);
                if (!response.ok) {
                    throw new Error('경기 기록을 불러오는데 실패했습니다.');
                }
                // ✨ 수정: genderMap 받기
                const { matches, genderMap } = await response.json();
                
                document.getElementById('matchDetailModalLabel').innerHTML = `<b>${pair.replace('/', ' ')}</b> 페어`;
                const modalBody = document.getElementById('matchDetailModalBody');
                
                // ✨ 수정: genderMap 전달
                modalBody.innerHTML = buildMatchTableHtml(matches, pair, stats, genderMap);

                matchDetailModal.show();
            } catch (error) {
                console.error('Error fetching match details:', error);
                alert(error.message);
            }
        }
        
        function buildMatchTableHtml(matches, pair, stats, genderMap) {
            const pairTags = [];
            if (stats.matches > 0) {
                if (stats.winRate >= 90) { pairTags.push('#환상의케미'); }
                else if (stats.winRate >= 80) { pairTags.push('#우린그냥운명이야'); }
                else if (stats.winRate >= 70) { pairTags.push('#시너지폭발'); }
                else if (stats.winRate >= 60) { pairTags.push('#꿀케미'); }
                else if (stats.winRate >= 50) { pairTags.push('#믿고가는조합'); }
                else if (stats.winRate >= 40) { pairTags.push('#흔들리는케미'); }
                else if (stats.winRate >= 30) { pairTags.push('#분발하자'); }
                else if (stats.winRate >= 20) { pairTags.push('#눈물의듀오'); }
                else if (stats.winRate >= 10) { pairTags.push('#승률도망'); }
                else { pairTags.push('#케미실종'); }
            }
            const pairTagsText = pairTags.join(' ');
            const winRateHtml = stats.winRate > 50
                ? `<strong>(${stats.winRate}%)</strong>`
                : `(${stats.winRate}%)`;
            const summaryHtml = `
                <div style="padding: 1rem; border-bottom: 1px solid #dee2e6;">
                    <div class="stat-item">
                        <span><strong>📊 전적</strong></span>
                        <span class="stat-value">${stats.matches}전 ${stats.wins}승 ${stats.losses}패 ${winRateHtml}</span>
                    </div>
                    ${pairTagsText ? `
                    <div class="stat-item">
                        <span></span>
                        <span class="stat-value">${pairTagsText}</span>
                    </div>` : ''}
                </div>
            `;

            // 플레이어 이름에 성별에 따른 배경색과 스타일을 적용하는 헬퍼 함수
            const stylePlayerName = (player, isBold = false) => {
                if (!player) return '';
                const gender = genderMap[player];
                // 성별에 따라 배경색 지정
                const color = gender === '남' ? '#ddffff' : (gender === '여' ? '#ffffdd' : 'inherit');
                const content = isBold ? `<strong>${player}</strong>` : player;
                // 'backgrond-color' 오타 수정 및 스타일 적용
                return `<span style="background-color: ${color};">${content}</span>`;
            };

            let tableHtml = '';
            if (matches.length > 0) {
                const [player1, player2] = pair.split('/');
                tableHtml = `
                    <div class="table-responsive">
                        <table class="table table-sm text-center align-middle text-nowrap" style="font-size: 0.8rem;">
                            <thead class="table-light">
                                <tr><th>날짜</th><th>코트</th><th>우리 팀</th><th></th><th>상대 팀</th><th>결과</th><th>분류</th><th>영상</th></tr>
                            </thead>
                            <tbody>
                `;
                
                let prevDate = null, prevCourt = null, currentGroupClass = 'group-a-bg';
                matches.forEach(match => {
                    if (prevDate !== null && (match.date !== prevDate || match.court !== prevCourt)) {
                        currentGroupClass = (currentGroupClass === 'group-a-bg') ? 'group-b-bg' : 'group-a-bg';
                    }
                    prevDate = match.date;
                    prevCourt = match.court;

                    const team1Players = [match.team1_deuce, match.team1_ad];
                    const isPairOnTeam1 = team1Players.includes(player1) && team1Players.includes(player2);

                    let myTeamDisplay, opponentTeamDisplay, result, selectedScore, opponentScore;

                    if (isPairOnTeam1) {
                        // 우리 팀이 team1일 경우 (듀스, 애드 순서로 표시)
                        myTeamDisplay = `${stylePlayerName(match.team1_deuce, true)} ${stylePlayerName(match.team1_ad, true)}`;
                        // 상대 팀(team2) 선수들에게도 배경색 적용
                        opponentTeamDisplay = `${stylePlayerName(match.team2_deuce)} ${stylePlayerName(match.team2_ad || '')}`;
                        result = match.team1_result;
                        selectedScore = match.team1_score;
                        opponentScore = match.team2_score;
                    } else {
                        // 우리 팀이 team2일 경우 (듀스, 애드 순서로 표시)
                        myTeamDisplay = `${stylePlayerName(match.team2_deuce, true)} ${stylePlayerName(match.team2_ad, true)}`;
                        // 상대 팀(team1) 선수들에게도 배경색 적용
                        opponentTeamDisplay = `${stylePlayerName(match.team1_deuce)} ${stylePlayerName(match.team1_ad || '')}`;
                        result = match.team2_result;
                        selectedScore = match.team2_score;
                        opponentScore = match.team1_score;
                    }
                    
                    // 불필요한 공백 제거
                    myTeamDisplay = myTeamDisplay.trim();
                    opponentTeamDisplay = opponentTeamDisplay.trim();

                    let resultDisplay;
                    if (result === '승') { resultDisplay = '<span style="color: darkblue;">승</span>'; } 
                    else if (result === '패') { resultDisplay = '<span style="color: darkred;">패</span>'; }
                    else { resultDisplay = '<span>무</span>'; }
                    
                    const scoreHtml = selectedScore > opponentScore ? `<b>${selectedScore}</b>:${opponentScore}` : selectedScore < opponentScore ? `${selectedScore}:<b>${opponentScore}</b>` : `${selectedScore}:${opponentScore}`;
                    const videoLink = match.video ? `<a href="${match.video}" target="_blank" rel="noopener" onclick="event.stopPropagation();"><i class="bi bi-youtube text-danger fs-6"></i></a>` : '';
                    
                    tableHtml += `
                        <tr class="${currentGroupClass}">
                            <td>${match.date ? match.date.substring(2) : ''}</td>
                            <td>${match.court}</td>
                            <td>${myTeamDisplay}</td>
                            <td>${scoreHtml}</td>
                            <td>${opponentTeamDisplay}</td>
                            <td>${resultDisplay}</td>
                            <td>${match.type}</td>
                            <td>${videoLink}</td>
                        </tr>
                    `;
                });
                tableHtml += `</tbody></table></div>`;
            } else {
                tableHtml = '<p class="text-center p-4">해당 조건의 경기 기록이 없습니다.</p>';
            }

            return summaryHtml + tableHtml;
        }


        document.addEventListener('DOMContentLoaded', () => {
            originalRows = Array.from(document.querySelectorAll('#scoreTbody tr'));

            const savedFilters = filterStorage.load();
            
            const currentParams = new URLSearchParams(window.location.search);
            const scoreTypes = savedFilters.types.filter(t => !t.includes('단'));
            const savedParams = new URLSearchParams();
            savedParams.set('period', savedFilters.period);
            if (scoreTypes.length > 0) savedParams.set('types', scoreTypes.join(','));
            if (savedFilters.courts && savedFilters.courts.length > 0) savedParams.set('courts', savedFilters.courts.join(','));

            if (currentParams.toString() !== savedParams.toString()) {
                window.location.replace(`/chemistry-score?${savedParams.toString()}`);
                return;
            }

            const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ];
            const selectedPeriod = periods.find(p => p.value === savedFilters.period) || periods[3];
            document.getElementById('periodDropdownButton').textContent = `기간: ${selectedPeriod.text}`;
            document.querySelectorAll('#typeFilter input').forEach(cb => { if (savedFilters.types.includes(cb.value)) cb.checked = true; });
            if (savedFilters.courts) document.querySelectorAll('#courtFilter input').forEach(cb => { if (savedFilters.courts.includes(cb.value)) cb.checked = true; });
            
            updateCheckboxDropdownText('typeDropdownButton', 'typeFilter', '분류');
            updateCheckboxDropdownText('courtDropdownButton', 'courtFilter', '코트');
            
            defaultSort();
            // 검색 이벤트 리스너
            const searchToggle = document.getElementById('searchToggle');
            const searchContainer = document.getElementById('searchContainer');
            const clearSearchBtn = document.getElementById('clearSearchBtn');
            const searchInput = document.getElementById('searchInput');
            searchToggle.addEventListener('click', (e) => { e.preventDefault(); searchToggle.style.display = 'none'; searchContainer.style.display = 'flex'; searchInput.focus(); });
            clearSearchBtn.addEventListener('click', () => { searchInput.value = ''; filterTable(); searchContainer.style.display = 'none'; searchToggle.style.display = 'inline-block'; });
            searchInput.addEventListener('keyup', filterTable);
        });

    </script>
</body>
</html>