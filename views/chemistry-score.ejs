<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" href="/image/btw-tran-180x180.png"/>
    <link rel="icon" type="image/png" href="/image/btw-tran-180x180.png"/>
    <title>불꽃테니스</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        html, body { height: 100%; overflow: hidden; margin: 0; }
        .app-container { display: flex; flex-direction: column; height: 100%; }
        .sticky-header { position: static; z-index: 102; border-bottom: 1px solid #eee; height: 60px; flex-shrink: 0; padding: 0px 5px; }
        .filter-section { position: static; z-index: 101; padding: 15px; background-color: #f8f9fa; border-bottom: 1px solid #eee; flex-shrink: 0; }
        .filter-section .dropdown-toggle { display: flex; justify-content: space-between; align-items: center; text-align: left; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .dropdown-menu { padding: .75rem; width: 100%; font-size: 0.8rem;}
        .dropdown-menu .checkbox-group { max-height: 250px; overflow-y: auto; margin-bottom: .5rem;}
        .filter-control-links { padding-bottom: .5rem; margin-bottom: .5rem; border-bottom: 1px solid #eee; }
        .filter-control-links a { font-size: .8rem; color: #6c757d; text-decoration: none; margin-left: 10px; }
        .table-responsive { flex-grow: 1; overflow-y: auto; }
        #scoreTable { font-size: 0.8rem; }
        #scoreTable th { position: sticky; top: 0; background-color: #f8f9fa; z-index: 90; }
        .sortable-th { cursor: pointer; }
        .bottom-nav { position: static; border-top: 1px solid #ddd; background-color: white; z-index: 103; flex-shrink: 0; }
        .bottom-nav .nav-link { font-size: 0.9rem; padding: 0.5rem 0; color: #888888; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; }
        .bottom-nav .nav-link img { width: 24px; height: 24px; margin-bottom: 4px; filter: grayscale(100%); opacity: 0.3; }
        .bottom-nav .nav-link.active { color: black !important; }
        .bottom-nav .nav-link.active img { filter: none; opacity: 1; }
        .hamburger-icon { font-size: 1.8rem; margin-right: 10px; color: black; cursor: pointer; }
        .side-menu { position: fixed; top: 0; right: -200px; width: 200px; height: 100%; background-color: white; box-shadow: -2px 0 5px rgba(0,0,0,0.1); transition: right 0.3s ease-in-out; z-index: 1040; padding: 20px; }
        .side-menu.active { right: 0; }
        .side-menu a { display: block; padding: 15px 10px; color: #333; text-decoration: none; border-bottom: 1px solid #f0f0f0; }
        .side-menu a:hover { background-color: #f8f9fa; }
        .overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1030; }
        .overlay.active { display: block; }
        #searchContainer { display: none; width: 150px; }
        #searchInput { min-width: 100px; }
        #searchToggle .bi-search { font-size: 1.2rem; color: black; }
    </style>
</head>
<body>
    <div class="modal fade" id="matchDetailModal" tabindex="-1" aria-labelledby="matchDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="matchDetailModalLabel">경기 기록</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="matchDetailModalBody" style="padding: 0;">
                    </div>
            </div>
        </div>
    </div>

    <div class="app-container">
        <div class="d-flex align-items-center justify-content-between sticky-header">
            <div class="d-flex align-items-center">
                <img src="/image/btw-tran-180x180.png" alt="로고" style="height: 40px; margin-right: 5px;">
                <h5 style="margin-bottom: 0;"><b>케미 스코어</b></h5>
            </div>
            <div class="d-flex align-items-center">
                <div id="searchContainer" class="input-group input-group-sm me-2">
                    <input type="text" id="searchInput" class="form-control" placeholder="페어 검색" />
                    <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn"><i class="bi bi-x-lg"></i></button>
                </div>
                <a href="#" id="searchToggle" class="me-3"><i class="bi bi-search"></i></a>
                <i class="bi bi-list hamburger-icon"></i>
            </div>
        </div>

        <div class="side-menu">
            <h5>메뉴</h5>
            <hr>
            <a href="/chemistry-score"><i class="bi bi-person-heart"></i>&nbsp;&nbsp;케미 스코어</a>
            <a href="/attendance"><i class="bi bi-calendar-check"></i>&nbsp;&nbsp;출석부</a>
        </div>
        <div class="overlay"></div>

        <div class="filter-section">
            <div class="row g-2">
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="periodDropdownButton" data-bs-toggle="dropdown" aria-expanded="false">기간</button>
                        <ul class="dropdown-menu" aria-labelledby="periodDropdownButton">
                             <% const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ]; %>
                             <% periods.forEach(period => { %>
                                 <li><a class="dropdown-item" href="#" onclick="applyFilters({ period: '<%= period.value %>' })"><%= period.text %></a></li>
                             <% }) %>
                        </ul>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="typeDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">분류</button>
                        <div class="dropdown-menu" aria-labelledby="typeDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('typeFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('typeFilter'); return false;">전체해제</a></div>
                            <div id="typeFilter" class="checkbox-group">
                                <% const types = ['남복', '여복', '혼복', '혼복(남3)', '혼복(여3)', '혼복(남vs여)']; %>
                                <% types.forEach(type => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= type %>" id="type-<%= type %>"><label class="form-check-label" for="type-<%= type %>"><%= type %></label></div>
                                <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle w-100" style="font-size: 0.8rem;" type="button" id="courtDropdownButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">코트</button>
                        <div class="dropdown-menu" aria-labelledby="courtDropdownButton">
                            <div class="filter-control-links"><a href="#" onclick="selectAll('courtFilter'); return false;">전체선택</a><a href="#" onclick="deselectAll('courtFilter'); return false;">전체해제</a></div>
                            <div id="courtFilter" class="checkbox-group">
                                <% courts.forEach(court => { %>
                                    <div class="form-check"><input class="form-check-input" type="checkbox" value="<%= court.name %>" id="court-<%= court.name %>"><label class="form-check-label" for="court-<%= court.name %>"><%= court.name %></label></div>
                                <% }) %>
                            </div>
                            <button class="btn btn-primary btn-sm w-100" onclick="applyFilters()">확인</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table id="scoreTable" class="table table-sm table-striped text-center align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width: 29%;">페어</th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(1, 'num')">경기수 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(2, 'num')">승리 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 16%;" onclick="sortTable(3, 'num')">패배 <i class="bi bi-arrow-down-up"></i></th>
                        <th class="sortable-th" style="width: 18%;" onclick="sortTable(4, 'num')">승률 <i class="bi bi-arrow-down-up"></i></th>
                        <th style="width: 5%;"></th> </tr>
                </thead>
                <tbody id="scoreTbody">
                    <% if (pairData && pairData.length > 0) { %>
                        <% pairData.forEach(item => { %>
                            <tr data-pair="<%= item.pair %>" style="cursor: pointer;" onclick="showMatchDetails(this)">
                                <td><%= item.pair %></td>
                                <td><%= item.matches %></td>
                                <td><%= item.wins %></td>
                                <td><%= item.losses %></td>
                                <% if (item.winRate > 50) { %>
                                    <td><strong><%= item.winRate %>%</strong></td>
                                <% } else { %>
                                    <td><%= item.winRate %>%</td>
                                <% } %>
                                <td><i class="bi bi-chevron-right text-muted"></i></td> </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="6" class="text-center p-5">표시할 데이터가 없습니다.<br><small>필터 조건을 변경하거나 경기 기록을 추가해주세요.</small></td></tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <nav class="navbar bottom-nav">
             <div class="container d-flex justify-content-around">
                <a class="nav-link" href="/"><img src="/image/free-icon-tennis-8122941.png" alt="경기 기록" /> <span>경기 기록</span></a>
                <a class="nav-link" href="/my-score"><img src="/image/free-icon-individual-11985530.png" alt="개인 스코어" /> <span>개인 스코어</span></a>
                <a class="nav-link" href="/chemistry"><img src="/image/free-icon-people-2118701.png" alt="상대와 케미" /> <span>상대와 케미</span></a>
            </div>
        </nav>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/common-filter.js"></script>
    <script>
        function applyFilters(options = {}) {
            let filters = filterStorage.load();
            
            const singleTypes = filters.types.filter(t => t.includes('단'));
            const newDoubleTypes = Array.from(document.querySelectorAll('#typeFilter input:checked')).map(cb => cb.value);
            filters.types = [...new Set([...singleTypes, ...newDoubleTypes])];
            filters.courts = Array.from(document.querySelectorAll('#courtFilter input:checked')).map(cb => cb.value);
            if (options.period) filters.period = options.period;
            filterStorage.save(filters);

            const params = new URLSearchParams();
            params.set('period', filters.period);
            if (newDoubleTypes.length > 0) params.set('types', newDoubleTypes.join(','));
            if (filters.courts && filters.courts.length > 0) params.set('courts', filters.courts.join(','));
            
            window.location.href = `/chemistry-score?${params.toString()}`;
        }

        // --- 정렬 및 검색 로직 (기존과 동일) ---
        let sortState = { col: 4, asc: false };

        function sortTable(colIndex, type) {
            const tbody = document.getElementById("scoreTbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            if (rows.length <= 1 && rows[0].children.length <= 1) return;
            sortState.asc = (sortState.col === colIndex) ? !sortState.asc : true;
            sortState.col = colIndex;
            const direction = sortState.asc ? 1 : -1;
            rows.sort((a, b) => {
                let valA = a.children[colIndex].innerText.trim().replace('%', '');
                let valB = b.children[colIndex].innerText.trim().replace('%', '');
                return (parseFloat(valA) - parseFloat(valB)) * direction;
            });

            sortedRows = rows; // 정렬된 결과를 sortedRows에 저장

            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));
            document.querySelectorAll('#scoreTable th i').forEach((icon, index) => {
                const thIndex = icon.parentElement.cellIndex;
                icon.className = 'bi bi-arrow-down-up';
                if (thIndex === sortState.col) {
                    icon.className = sortState.asc ? 'bi bi-sort-up' : 'bi bi-sort-down';
                }
            });
        }

        function defaultSort() {
            const tbody = document.getElementById("scoreTbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            if (rows.length <= 1 && rows[0].children.length <= 1) return;
            rows.sort((a, b) => {
                const matchesA = parseFloat(a.children[1].innerText.trim());
                const matchesB = parseFloat(b.children[1].innerText.trim());
                if (matchesB !== matchesA) return matchesB - matchesA;

                const winRateA = parseFloat(a.children[4].innerText.trim().replace('%', ''));
                const winRateB = parseFloat(b.children[4].innerText.trim().replace('%', ''));
                return winRateB - winRateA;
            });

            sortedRows = rows; // 정렬된 결과를 sortedRows에 저장

            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));
            document.querySelectorAll('#scoreTable th i')[0].className = 'bi bi-sort-down';
        }
        
        // 검색 기능을 위한 변수 (DOMContentLoaded 밖으로 이동)
        let originalRows = [];
        let sortedRows = []; // 정렬된 행을 저장할 배열 추가

        function filterTable() {
            const searchInput = document.getElementById('searchInput');
            const searchText = searchInput.value.toLowerCase().trim();
            const keywords = searchText.split(' ').filter(k => k);
            const tbody = document.getElementById('scoreTbody');
            tbody.innerHTML = '';

            sortedRows.forEach(row => { // 정렬된 행(sortedRows)을 순회하도록 변경
                const pairText = row.querySelector('td:first-child').innerText.toLowerCase();
                const isMatch = keywords.every(keyword => pairText.includes(keyword));

                if (isMatch || keywords.length === 0) {
                    const newRow = row.cloneNode(true);
                    if (keywords.length > 0) {
                        const searchRegex = new RegExp(keywords.join('|'), 'gi');
                        const cell = newRow.querySelector('td:first-child');
                        cell.innerHTML = cell.innerText.replace(searchRegex, '<strong>$&</strong>');
                    }
                    tbody.appendChild(newRow);
                }
            });
        }

                // ✨ 모달 관련 전역 변수 및 함수 추가
        const matchDetailModal = new bootstrap.Modal(document.getElementById('matchDetailModal'));
        
        async function showMatchDetails(rowElement) {
            const pair = rowElement.dataset.pair;
            const currentFilters = new URLSearchParams(window.location.search);
            
            const period = currentFilters.get('period') || '6m';
            const types = currentFilters.get('types') || '남복,여복,혼복';
            const courts = currentFilters.get('courts') || '';

            try {
                const response = await fetch(`/api/matches/pair?pair=${encodeURIComponent(pair)}&period=${period}&types=${types}&courts=${courts}`);
                if (!response.ok) {
                    throw new Error('경기 기록을 불러오는데 실패했습니다.');
                }
                const matches = await response.json();
                
                document.getElementById('matchDetailModalLabel').innerText = `${pair} 페어 경기 기록`;
                const modalBody = document.getElementById('matchDetailModalBody');
                
                if (matches.length > 0) {
                    // ✨ buildMatchTableHtml 함수에 pair 정보를 넘겨줍니다.
                    modalBody.innerHTML = buildMatchTableHtml(matches, pair);
                } else {
                    modalBody.innerHTML = '<p class="text-center p-4">해당 조건의 경기 기록이 없습니다.</p>';
                }

                matchDetailModal.show();
            } catch (error) {
                console.error('Error fetching match details:', error);
                alert(error.message);
            }
        }
        
        // ✨ 함수 로직 전체 수정
        function buildMatchTableHtml(matches, pair) {
            const [player1, player2] = pair.split('/');

            let tableHtml = `
                <div class="table-responsive">
                    <table class="table table-sm table-striped text-center align-middle text-nowrap" style="font-size: 0.8rem;">
                        <colgroup>
                            <col style="width: 15%;"><col style="width: 13%;"><col style="width: 25%;"><col style="width: 13%;"><col style="width: 12%;"><col style="width: 12%;"><col style="width: 10%;">
                        </colgroup>
                        <thead class="table-light">
                            <tr><th>날짜</th><th>코트</th><th>상대팀</th><th>스코어</th><th>결과</th><th>분류</th><th>영상</th></tr>
                        </thead>
                        <tbody>
            `;
            
            matches.forEach(match => {
                const team1Players = [match.team1_deuce, match.team1_ad];
                const isPairOnTeam1 = team1Players.includes(player1) && team1Players.includes(player2);

                let opponentPair, result, selectedScore, opponentScore;

                if (isPairOnTeam1) {
                    opponentPair = `${match.team2_deuce}${match.team2_ad ? '/' + match.team2_ad : ''}`;
                    result = match.team1_result;
                    selectedScore = match.team1_score;
                    opponentScore = match.team2_score;
                } else {
                    opponentPair = `${match.team1_deuce}${match.team1_ad ? '/' + match.team1_ad : ''}`;
                    result = match.team2_result;
                    selectedScore = match.team2_score;
                    opponentScore = match.team1_score;
                }

                let resultDisplay;
                if (result === '승') {
                    resultDisplay = '<span style="color: darkblue;">승</span>';
                } else if (result === '패') {
                    resultDisplay = '<span style="color: darkred;">패</span>';
                } else {
                    resultDisplay = '<span>무</span>';
                }
                
                const videoLink = match.video 
                    ? `<a href="${match.video}" target="_blank" rel="noopener" onclick="event.stopPropagation();"><i class="bi bi-youtube text-danger fs-6"></i></a>`
                    : '';

                tableHtml += `
                    <tr>
                        <td>${match.date ? match.date.substring(2) : ''}</td>
                        <td>${match.court}</td>
                        <td>${opponentPair}</td>
                        <td>${selectedScore}:${opponentScore}</td>
                        <td>${resultDisplay}</td>
                        <td>${match.type}</td>
                        <td>${videoLink}</td>
                    </tr>
                `;
            });

            tableHtml += `</tbody></table></div>`;
            return tableHtml;
        }

        document.addEventListener('DOMContentLoaded', () => {
            originalRows = Array.from(document.querySelectorAll('#scoreTbody tr'));

            const savedFilters = filterStorage.load();
            
            const currentParams = new URLSearchParams(window.location.search);
            const scoreTypes = savedFilters.types.filter(t => !t.includes('단'));
            const savedParams = new URLSearchParams();
            savedParams.set('period', savedFilters.period);
            if (scoreTypes.length > 0) savedParams.set('types', scoreTypes.join(','));
            if (savedFilters.courts && savedFilters.courts.length > 0) savedParams.set('courts', savedFilters.courts.join(','));

            if (currentParams.toString() !== savedParams.toString()) {
                window.location.replace(`/chemistry-score?${savedParams.toString()}`);
                return;
            }

            const periods = [ { value: 'all', text: '전체' }, { value: '1m', text: '최근 1개월' }, { value: '3m', text: '최근 3개월' }, { value: '6m', text: '최근 6개월' }, { value: '1y', text: '최근 1년' }, { value: '2025', text: '2025년' }, { value: '2024', text: '2024년' } ];
            const selectedPeriod = periods.find(p => p.value === savedFilters.period) || periods[3];
            document.getElementById('periodDropdownButton').textContent = `기간: ${selectedPeriod.text}`;
            
            document.querySelectorAll('#typeFilter input').forEach(cb => { if (savedFilters.types.includes(cb.value)) cb.checked = true; });
            if (savedFilters.courts) document.querySelectorAll('#courtFilter input').forEach(cb => { if (savedFilters.courts.includes(cb.value)) cb.checked = true; });
            
            updateCheckboxDropdownText('typeDropdownButton', 'typeFilter', '분류');
            updateCheckboxDropdownText('courtDropdownButton', 'courtFilter', '코트');
            
            defaultSort();
            
            // 검색 이벤트 리스너
            const searchToggle = document.getElementById('searchToggle');
            const searchContainer = document.getElementById('searchContainer');
            const clearSearchBtn = document.getElementById('clearSearchBtn');
            const searchInput = document.getElementById('searchInput');
            searchToggle.addEventListener('click', (e) => { e.preventDefault(); searchToggle.style.display = 'none'; searchContainer.style.display = 'flex'; searchInput.focus(); });
            clearSearchBtn.addEventListener('click', () => { searchInput.value = ''; filterTable(); searchContainer.style.display = 'none'; searchToggle.style.display = 'inline-block'; });
            searchInput.addEventListener('keyup', filterTable);
        });

    </script>
</body>
</html>