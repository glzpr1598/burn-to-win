<!DOCTYPE html>
<html lang="ko">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<link rel="apple-touch-icon" href="/image/btw.png" />
	<link rel="icon" type="image/png" href="/image/btw.png" />
	<link rel="stylesheet" href="/css/common.css" />
	<title>불꽃테니스</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
	<style>
		.month-navigator {
			display: flex;
			justify-content: center;
			align-items: center;
			padding: 10px;
			background-color: #f8f9fa;
			border-bottom: 1px solid #eee;
			flex-shrink: 0;
		}
		.month-navigator a {
			text-decoration: none;
			color: #212529;
		}
		.month-navigator h5 {
			margin: 0;
		}
		.month-navigator button {
			position: absolute;
			right: 15px;
		}
		.schedule-container {
			flex-grow: 1;
			overflow-y: auto;
			padding: 15px;
		}
		.user-selection-bar {
			flex-shrink: 0;
			padding: 10px 15px;
			background-color: #f8f9fa;
			border-bottom: 1px solid #dee2e6;
			font-size: 0.9rem;
		}
		.schedule-card {
			background-color: #fff;
			border: 1px solid #dee2e6;
			border-radius: .375rem;
			margin-bottom: 10px;
			padding: 10px 15px;
			transition: background-color 0.3s ease;
			font-size: 0.8rem;
		}
		.schedule-card.past-schedule {
			color: #6c757d;
		}
		.schedule-card.past-schedule .fw-bold {
			color: #6c757d !important;
		}
		.schedule-card.attending {
			background-color: #e7f3ff;
			border-color: #b3d7ff;
		}
		.schedule-card.is-upcoming {
			border-left: 5px solid #0d6efd;
		}
		.attendees-list {
			word-break: keep-all;
		}
		.comments-section {
			margin-top: 10px;
			border-top: 1px solid #eee;
		}
		.comment-item {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 5px 0px;
		}
		.comment-item>.text-muted {
			display: block;
			min-width: 0;
			overflow: hidden;
		}
		.comment-item>div:last-child {
			flex-shrink: 0;
		}
		.comment-item.hidden-comment {
			display: none;
		}
		.comment-item+.comment-item {
			border-top: 1px solid #f0f0f0;
		}
		.delete-comment-btn {
			cursor: pointer;
			color: #dc3545;
			font-size: 0.7rem;
		}
		.show-more-comments-btn {
			font-size: 0.75rem;
			color: #0d6efd;
			text-decoration: none;
			cursor: pointer;
		}
		.settlement-status {
			font-size: 0.8rem;
		}
		.settlement-status label {
			cursor: pointer;
		}
		.settlement-checkbox {
			vertical-align: middle;
			height: 0.8rem;
			border-color: gray;
		}
		.settlement-checkbox:disabled {
			cursor: not-allowed;
			opacity: 0.3;
		}
		.delete-postpone-btn {
			color: red;;
		}
        .btn-outline-primary:focus, .btn-outline-primary:hover, .btn-outline-primary:active {
            color: #0d6efd; /* 원래 글자색 유지 */
            background-color: transparent; /* 배경색 투명하게 유지 */
        }
        .btn-outline-danger:focus, .btn-outline-danger:hover, .btn-outline-danger:active {
            color: #dc3545; /* 원래 글자색 유지 */
            background-color: transparent; /* 배경색 투명하게 유지 */
        }
		.btn-outline-success:focus, .btn-outline-success:hover, .btn-outline-success:active {
            color: #198754; /* 원래 글자색 유지 */
            background-color: transparent; /* 배경색 투명하게 유지 */
        }
		.modal-body * {
			font-size: 0.9rem;
		}
		.app-container .btn-sm {
			font-size: 0.8rem;
		}
		#searchContainer { display: none; width: 150px; }
		#searchInput { min-width: 100px; }
		#searchToggle .bi-search { font-size: 1.2rem; color: black; margin-right: 15px; }
		#searchToggle { white-space: nowrap; }
	</style>
</head>

<body>
	<div class="app-container" data-year="<%= year %>" data-month="<%= month %>">
		<div class="d-flex align-items-center sticky-header">
			<div class="d-flex align-items-center flex-grow-1">
				<a href="/schedule">
					<img src="/image/btw-tran-180x180.png" alt="로고" style="height: 35px; margin-right: 5px;">
				</a>
				<a href="/schedule" style="color: black; text-decoration: none;">
					<h5 style="margin-bottom: 0;"><b>불꽃 일정</b></h5>
				</a>
			</div>
			<div class="d-flex align-items-center">
				<div id="searchContainer" class="input-group input-group-sm me-2">
					<input type="text" id="searchInput" class="form-control" placeholder="일정 검색" />
					<button class="btn btn-outline-secondary" type="button" id="clearSearchBtn">
						<i class="bi bi-x-lg"></i>
					</button>
				</div>
				<a href="#" id="searchToggle"><i class="bi bi-search"></i></a>
				<i class="bi bi-list hamburger-icon"></i>
			</div>
		</div>

		<%- include('partials/sidemenu') %>

			<div class="user-selection-bar d-flex justify-content-between align-items-center">
				<span style="display: flex">
					<i class="bi bi-person-circle"></i>&nbsp;<strong id="currentUser">사용자</strong>&nbsp;&nbsp;
					<button class="btn btn-outline-secondary btn-sm py-0" data-bs-toggle="modal"
						data-bs-target="#userSelectModal">변경</button>
				</span>
				<span>
					<button class="btn btn-outline-secondary btn-sm py-0" data-bs-toggle="modal"
						data-bs-target="#changePasswordModal">비밀번호 변경</button>
				</span>
			</div>

			<div class="month-navigator">
				<div class="d-flex align-items-center" style="gap: 1rem;">
					<a id="prevMonth" href="#"><i class="bi bi-chevron-left fs-6"></i></a>
					<h6 id="month-display" style="cursor: pointer; margin: 0;"><b>
							<%= year %>년 <%= month %>월
						</b>
					</h6>
					<a id="nextMonth" href="#"><i class="bi bi-chevron-right fs-6"></i></a>
				</div>
				<button class="btn btn-outline-danger btn-sm py-0 ms-3" data-bs-toggle="modal"
					data-bs-target="#postponeModal">유예 신청</button>
			</div>

			<div class="schedule-container" id="scheduleList">
				<% if (schedules.length > 0) { %>
					<%
						let currentWeek = 0;
						const getWeekOfMonth = (date) => {
							const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
							return Math.ceil((date.getDate() + firstDay) / 7);
						};
					%>

					<% schedules.forEach(schedule => { 
						const date = new Date(schedule.schedule_date + 'T00:00:00');
						const weekOfMonth = getWeekOfMonth(date);
						if (weekOfMonth !== currentWeek) {
							currentWeek = weekOfMonth;
					%>
						<h6 class="text-muted mb-2 mt-3"><b><%= currentWeek %>주차</b></h6>
					<% } %>

					<%
						const weekdays = ['일', '월', '화', '수', '목', '금', '토'];
						const dayOfWeek = weekdays[date.getDay()];
						const formattedDate = `${date.getDate()} ${dayOfWeek}`;
						const startTime = schedule.start_time.substring(0, 5);
						const endTime = schedule.end_time.substring(0, 5);
					%>

					<div class="schedule-card" id="schedule-<%= schedule.id %>"
						data-date="<%= schedule.schedule_date %>"
						data-maximum="<%= schedule.maximum %>">

						<div class="d-flex justify-content-between align-items-start mb-2">
							<div>
								<div class="fw-bold">
									<%= formattedDate %> | <%= startTime %>~<%= endTime %> | <%= schedule.location %>
									<% if (schedule.notes && schedule.notes.trim() !== '') { 
										const notes = schedule.notes;
										let notesDisplay = `| ${notes}`;
										if (notes.includes('여복데이')) {
											notesDisplay = `| <span style="color: darkred; font-weight: bold;">${notes}</span>`;
										} else if (notes.includes('준도데이')) {
											notesDisplay = `| <span style="color: darkblue; font-weight: bold;">${notes}</span>`;
										} else if (notes.includes('정기대관')) {
											notesDisplay = `| <span style="color: darkgreen; font-weight: bold;">${notes}</span>`;
										}
									%>
										<%- notesDisplay %>
									<% } %>
					 	    	</div>
								<div class="text-muted mt-1" style="font-size: 0.8rem;">
									<span><i class="bi bi-person"></i>
										<%= schedule.booker || '-' %>
									</span>
									<span class="ms-2"><i class="bi bi-coin"></i>
										<%= new Intl.NumberFormat().format(schedule.price || 0) %>원
									</span>
									<span class="ms-2"><i class="bi bi-wallet"></i>
										정산여부
									</span>
									<span class="settlement-status">
										<div class="form-check form-switch d-inline-block">
											<input class="form-check-input settlement-checkbox" type="checkbox" role="switch"
												id="settlementSwitch<%= schedule.id %>" data-schedule-id="<%= schedule.id %>"
												data-booker="<%= schedule.booker %>" <%=schedule.calculated==='Y' ? 'checked' : '' %>>
											<label class="form-check-label" for="settlementSwitch<%= schedule.id %>">
											</label>
										</div>
									</span>				
								</div>
							</div>
							<button class="btn btn-sm btn-success py-0 px-2 record-btn"
								data-schedule-id="<%= schedule.id %>">기록</button>
						</div>

						<div class="mb-2">
							<span class="fw-bold">참석(<span class="attendee-count"><%= schedule.attendees.length %></span>):</span>
							<span class="attendees-list">
								<% if (schedule.attendees.length > 0) { %>
									<% schedule.attendees.forEach((attendee, index) => { %>
										<% const gender = genderMap[attendee] || ''; %>
										<% const genderClass = gender === '남' ? 'text-male' : (gender === '여' ? 'text-female' : ''); %>
										<span class="<%= genderClass %>"><%= attendee %></span><% if (index < schedule.attendees.length - 1) { %><%= ', ' %><% } %>
									<% }) %>
								<% } else { %>
									없음
								<% } %>
							</span>
						</div>

						<div>
							<div class="d-flex justify-content-between align-items-center">
								<button class="btn btn-sm btn-primary py-0 px-2 attend-btn"
									data-schedule-id="<%= schedule.id %>">참석</button>
								<button class="btn btn-sm btn-secondary py-0 px-2 comment-btn"
									data-schedule-id="<%= schedule.id %>">댓글</button>
							</div>

							<div class="comment-container">
								<% if (schedule.comments.length > 0) { %>
									<div class="comments-section">
										<div class="comment-list">
											<% schedule.comments.forEach((comment, index) => { %>
												<div class="comment-item <%= index >= 3 ? 'hidden-comment' : '' %>" id="comment-<%= comment.id %>">
													<div class="text-muted">
														<div class="fw-bold"><%= comment.member_name %></div>
														<div><%= comment.comment %></div>
													</div>
													<div>
														<span class="text-black-50" style="font-size: 0.7rem;"><%= comment.created_at %></span>
														<i class="bi bi-x-lg delete-comment-btn"
															data-comment-id="<%= comment.id %>"
															data-author="<%= comment.member_name %>"
															style="display:none;"></i>
													</div>
												</div>
											<% }) %>
										</div>

										<% if (schedule.comments.length > 3) { %>
											<div class="text-center mt-1">
												<span class="show-more-comments-btn" data-schedule-id="<%= schedule.id %>">더보기...</span>
											</div>
										<% } %>
									</div>
								<% } %>
							</div>
						</div>
					</div>
					<% }) %>
				<% } else { %>
					<p class="text-center p-5 text-muted">해당 월의 일정이 없습니다.</p>
				<% } %>
			</div>

			<%- include('partials/navbar', { currentPage: 'schedule' }) %>
	</div>

	<div class="modal fade" id="userSelectModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h6 class="modal-title"><b>사용자 선택</b></h6><button type="button" class="btn-close"
						data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label for="loginName" class="form-label">이름</label>
						<select id="loginName" class="form-select">
							<option value="">-- 선택 --</option>
							<% members.forEach(member=> { %>
								<option value="<%= member.name %>">
									<%= member.name %>
								</option>
								<% }); %>
						</select>
					</div>
					<div class="mb-3">
						<label for="loginPassword" class="form-label">비밀번호</label>
						<input type="password" class="form-control" id="loginPassword" placeholder="초기 비밀번호: 0000">
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary btn-sm w-100" id="loginBtn">로그인</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="changePasswordModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h6 class="modal-title"><b>비밀번호 변경</b></h6><button type="button" class="btn-close"
						data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<div class="mb-2">
						<label for="currentPassword" class="form-label small">현재 비밀번호</label>
						<input type="password" class="form-control form-control-sm" id="currentPassword">
					</div>
					<div class="mb-2">
						<label for="newPassword" class="form-label small">새 비밀번호</label>
						<input type="password" class="form-control form-control-sm" id="newPassword">
					</div>
					<div class="mb-2">
						<label for="confirmNewPassword" class="form-label small">새 비밀번호 확인</label>
						<input type="password" class="form-control form-control-sm" id="confirmNewPassword">
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-sm btn-primary" id="changePasswordBtn">변경하기</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="monthSelectModal" tabindex="-1">
		<div class="modal-dialog modal-sm modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h6 class="modal-title"><b>날짜 선택</b></h6>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body d-flex justify-content-center">
					<div class="px-2">
						<select id="yearSelect" class="form-select">
							<% for(let i=new Date().getFullYear() + 1; i>= 2023; i--) { %>
								<option value="<%= i %>" <%=i==year ? 'selected' : '' %>><%= i %>년</option>
								<% } %>
						</select>
					</div>
					<div class="px-2">
						<select id="monthSelect" class="form-select">
							<% for(let i=1; i <=12; i++) { %>
								<option value="<%= i %>" <%=i==month ? 'selected' : '' %>><%= i %>월</option>
								<% } %>
						</select>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary btn-sm w-100" id="monthSelectConfirm">확인</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="commentModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h6 class="modal-title"><b>댓글 작성</b></h6>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<textarea class="form-control" id="commentText" rows="3"
						placeholder="댓글을 입력하세요.(참석 취소, 양도, 게스트 등)"></textarea>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-sm btn-primary" id="submitCommentBtn">등록</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="matchRecordModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered" style="align-items: start;">
			<div class="modal-content" style="margin-top: 50px;">
				<form id="matchRecordForm">
					<div class="modal-header">
						<h6 class="modal-title"><b>경기 기록 입력</b></h6>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<datalist id="modal-player-list"></datalist>
						<input type="hidden" name="date">
						<input type="hidden" name="court">
						<input type="hidden" name="schedule_id">
						<div class="border p-3 rounded">
							<div class="row">
								<div class="col text-center">
									<label class="form-label small">듀스코트(포)</label>
									<input type="text" class="form-control" id="team1_deuce" name="team1_deuce" list="modal-player-list" required>
								</div>
								<div class="col-auto d-flex align-items-end p-0">
                                    <button type="button" class="btn swap-btn px-0" data-team="1">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </button>
                                </div>
								<div class="col text-center">
									<label class="form-label small">애드코트(백)</label>
									<input type="text" class="form-control" id="team1_ad" name="team1_ad" list="modal-player-list">
								</div>
								<div class="col-auto text-center">
									<label class="form-label small">스코어</label>
									<select class="form-select text-center" name="team1_score" required>
										<% for(let i=0; i <=15; i++) { %>
											<option value="<%= i %>">
												<%= i %>
											</option>
											<% } %>
									</select>
								</div>
							</div>
						</div>

						<div class="text-center fw-bold my-2">VS</div>

						<div class="border p-3 rounded">
							<div class="row">
								<div class="col text-center">
									<label class="form-label small">듀스코트(포)</label>
									<input type="text" class="form-control" id="team2_deuce" name="team2_deuce" list="modal-player-list">
								</div>
								<div class="col-auto d-flex align-items-end p-0">
                                    <button type="button" class="btn swap-btn px-0" data-team="2">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </button>
                                </div>
								<div class="col text-center">
									<label class="form-label small">애드코트(백)</label>
									<input type="text" class="form-control" id="team2_ad" name="team2_ad" list="modal-player-list">
								</div>
								<div class="col-auto text-center">
									<label class="form-label small">스코어</label>
									<select class="form-select text-center" name="team2_score" required>
										<% for(let i=0; i <=15; i++) { %>
											<option value="<%= i %>">
												<%= i %>
											</option>
											<% } %>
									</select>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">취소</button>
						<button type="button" class="btn btn-sm btn-primary" id="submitMatchRecordBtn">저장하기</button>
					</div>
				</form>
			</div>
		</div>
	</div>

	<div class="modal fade" id="postponeModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h6 class="modal-title">
						<b><%= year %>년 <%= month %>월 유예 신청</b>
					</h6>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<div class="alert alert-secondary small p-2" role="alert">
						❗ <strong>월 1회</strong> 이상 참석이 없는 경우 <strong>리프레쉬</strong> 대상이 됩니다.<br>
						❗ 어쩔 수 없이 테니스를 칠 수 없는 상황이 생겼다면 <strong>매월 초(3 working days)</strong>까지 아래에 <strong>유예 신청 사유</strong>를 남겨주세요.<br>
						✅ 1회 1~2개월, 1년 2회 가능<br>
						✅ 사유: 시험, 출장, 결혼, 부상 등("개인적인 사유" 불가)<br>
					</div>

					<div id="postponeListContainer" class="mb-3">
					</div>

					<div class="input-group">
						<textarea id="postponeContent" class="form-control" rows="2" placeholder="유예 사유를 작성하세요."></textarea>
						<button class="btn btn-primary" type="button" id="submitPostponeBtn" >등록</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="newNoticeModal" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content" style="max-width: 300px; margin: 0 auto;">
				<div class="modal-header">
					<h6 class="modal-title"><b>알림</b></h6>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<p class="text-center my-3">새로운 공지사항이 있습니다.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-sm btn-primary" id="viewNoticesBtn">공지사항 보기</button>
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
	<script>
		// --- 전역 변수 ---
		let allScheduleCards = [];
    	let selectedUser = null;
		let userSelectModal, changePasswordModal, monthModal, commentModal, matchRecordModal, postponeModal,newNoticeModal;
		let currentScheduleId = null;
		const appContainer = document.querySelector('.app-container');
		const currentYear = parseInt(appContainer.dataset.year);
		const currentMonth = parseInt(appContainer.dataset.month);
		appContainer.dataset.latestNoticeDate = "<%= latestNoticeDate %>";
		const schedulesJsonString = `<%- JSON.stringify(schedules) %>`;
		const schedulesData = JSON.parse(schedulesJsonString);
    	const genderMap = JSON.parse('<%- JSON.stringify(genderMap || {}) %>');

		function clearInputValue(inputId) {
			const inputElement = document.getElementById(inputId);
			if (inputElement) {
				inputElement.value = '';
			}
		}

		// --- 초기화 ---
		document.addEventListener('DOMContentLoaded', () => {
			allScheduleCards = Array.from(document.querySelectorAll('.schedule-card')); // 전역 변수에 모든 카드 저장
    		allScheduleCards.forEach(card => card.dataset.originalHtml = card.innerHTML);

			initializeModals();
			initializeUser();
			initializeNavigators();
			addEventListenersToElements(); // 수정: 이벤트 리스너 초기화 함수 호출 위치 변경
			setupSideMenu();

			// --- 검색 관련 이벤트 리스너 설정 ---
			const searchToggle = document.getElementById('searchToggle');
			const searchContainer = document.getElementById('searchContainer');
			const searchInput = document.getElementById('searchInput');
			const clearSearchBtn = document.getElementById('clearSearchBtn');

			searchToggle.addEventListener('click', (e) => {
				e.preventDefault();
				searchToggle.style.display = 'none';
				searchContainer.style.display = 'flex';
				searchInput.focus();
			});

			clearSearchBtn.addEventListener('click', () => {
				searchInput.value = '';
				filterSchedules(); // 입력값 초기화 후 필터링 다시 실행
				searchContainer.style.display = 'none';
				searchToggle.style.display = 'block';
			});

			searchInput.addEventListener('keyup', filterSchedules);
			
			document.querySelectorAll('.swap-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const team = this.dataset.team;
                    const form = document.getElementById('matchRecordForm');
                    const deuceInput = form.querySelector(`[name="team${team}_deuce"]`);
                    const adInput = form.querySelector(`[name="team${team}_ad"]`);
                    const tempValue = deuceInput.value;
                    deuceInput.value = adInput.value;
                    adInput.value = tempValue;
                });
            });
		});

		function initializeModals() {
			userSelectModal = new bootstrap.Modal(document.getElementById('userSelectModal'));
			changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
			monthModal = new bootstrap.Modal(document.getElementById('monthSelectModal'));
			commentModal = new bootstrap.Modal(document.getElementById('commentModal'));
			matchRecordModal = new bootstrap.Modal(document.getElementById('matchRecordModal'));
			postponeModal = new bootstrap.Modal(document.getElementById('postponeModal'));

			const newNoticeModalEl = document.getElementById('newNoticeModal');
			if (newNoticeModalEl) {
				newNoticeModal = new bootstrap.Modal(newNoticeModalEl);

				const noticeKey = 'seen-notice-' + appContainer.dataset.latestNoticeDate;

				// '공지사항 보기' 버튼 클릭 시
				document.getElementById('viewNoticesBtn').addEventListener('click', () => {
					localStorage.setItem(noticeKey, 'true');
					window.location.href = '/notice';
				});

				// 모달이 닫힐 때 (취소, X 버튼, 배경 클릭 등)
				newNoticeModalEl.addEventListener('hide.bs.modal', () => {
					localStorage.setItem(noticeKey, 'true');
				});
			}

			document.getElementById('month-display').addEventListener('click', () => monthModal.show());
			document.getElementById('monthSelectConfirm').addEventListener('click', () => {
				const year = document.getElementById('yearSelect').value;
				const month = document.getElementById('monthSelect').value;
				window.location.href = `/schedule?year=${year}&month=${month}`;
			});
			document.getElementById('postponeModal').addEventListener('show.bs.modal', loadPostponeData);
		}

		// 수정: 이벤트 위임을 사용하여 이벤트 리스너 설정
		function addEventListenersToElements() {
			const scheduleList = document.getElementById('scheduleList');

			scheduleList.addEventListener('click', function(event) {
				const target = event.target;

				if (target.classList.contains('record-btn')) {
					openRecordModal(target.dataset.scheduleId);
				} else if (target.classList.contains('comment-btn')) {
					openCommentModal(target.dataset.scheduleId);
				} else if (target.classList.contains('attend-btn')) {
					handleAttendClick(event);
				} else if (target.classList.contains('delete-comment-btn')) {
					handleDeleteCommentClick(event);
				} else if (target.classList.contains('show-more-comments-btn')) {
					handleShowMoreComments(event);
				}
			});

			scheduleList.addEventListener('change', function(event) {
				const target = event.target;
				if (target.classList.contains('settlement-checkbox')) {
					handleSettlementChange(event);
				}
			});

			document.getElementById('submitMatchRecordBtn').addEventListener('click', handleMatchRecordSubmit);
			document.getElementById('submitCommentBtn').addEventListener('click', submitComment);
			document.getElementById('loginBtn').addEventListener('click', handleLogin);
			document.getElementById('changePasswordBtn').addEventListener('click', handleChangePassword);
			document.getElementById('submitPostponeBtn').addEventListener('click', handleSubmitPostpone);
		}

		function filterSchedules() {
			const searchInput = document.getElementById('searchInput').value.toLowerCase().trim();
			const keywords = searchInput.split(' ').filter(k => k !== '');

			allScheduleCards.forEach(card => {
				// 1. 하이라이트를 적용하기 전, 카드의 내용을 원본 HTML로 초기화합니다.
				if (card.dataset.originalHtml) {
					card.innerHTML = card.dataset.originalHtml;
				}

				// 2. 검색 대상 텍스트를 모든 필드에서 수집 (작성일시는 이미 포함되어 있음)
				const infoElement = card.querySelector('.fw-bold');
				const attendeesElement = card.querySelector('.attendees-list');
				const bookerElement = card.querySelector('.bi-person').parentElement;
				const commentsContainer = card.querySelector('.comment-container');
				
				let cardText = (
					infoElement.textContent + 
					attendeesElement.textContent + 
					bookerElement.textContent
				).toLowerCase();

				if (commentsContainer) {
					cardText += commentsContainer.textContent.toLowerCase();
				}
				
				const isMatch = keywords.every(keyword => cardText.includes(keyword));

				if (isMatch) {
					card.style.display = '';

					// 3. 검색어가 있을 경우, 일치하는 텍스트를 찾아 굵게 표시합니다.
					if (keywords.length > 0) {
						const searchRegex = new RegExp(keywords.join('|'), 'gi');
						const highlightWrapper = (match) => `<span class="search-highlight">${match}</span>`;

						// 기존 필드 하이라이트
						if (infoElement) {
							infoElement.innerHTML = infoElement.innerHTML.replace(searchRegex, highlightWrapper);
						}
						card.querySelectorAll('.attendees-list > span').forEach(span => {
							span.innerHTML = span.innerHTML.replace(searchRegex, highlightWrapper);
						});
						if (bookerElement) {
							bookerElement.innerHTML = bookerElement.innerHTML.replace(searchRegex, highlightWrapper);
						}

						// 댓글 하이라이트
						card.querySelectorAll('.comment-item').forEach(comment => {
							const authorElement = comment.querySelector('.fw-bold');
							const contentElement = authorElement.nextElementSibling;
							// ✨ 댓글 작성일시 요소를 선택합니다.
							const timestampElement = comment.querySelector('.text-black-50');

							if (authorElement) {
								authorElement.innerHTML = authorElement.innerHTML.replace(searchRegex, highlightWrapper);
							}
							if (contentElement) {
								contentElement.innerHTML = contentElement.innerHTML.replace(searchRegex, highlightWrapper);
							}
							// ✨ 댓글 작성일시를 하이라이트합니다.
							if (timestampElement) {
								timestampElement.innerHTML = timestampElement.innerHTML.replace(searchRegex, highlightWrapper);
							}
						});
					}
					// 4. 검색 결과로 표시되는 카드의 UI를 업데이트합니다.
					updateSingleCardUI(card);
				} else {
					card.style.display = 'none';
				}
			});

			// 주차(h6) 헤더 표시 여부를 업데이트하는 로직
			const scheduleList = document.getElementById('scheduleList');
			const weekHeaders = scheduleList.querySelectorAll('h6');
			weekHeaders.forEach(header => {
				let nextElement = header.nextElementSibling;
				let weekHasVisibleCard = false;
				while (nextElement && (nextElement.tagName === 'H6' || nextElement.classList.contains('schedule-card'))) {
					if (nextElement.tagName === 'H6') break;
					if (nextElement.style.display !== 'none') {
						weekHasVisibleCard = true;
						break;
					}
					nextElement = nextElement.nextElementSibling;
				}
				header.style.display = weekHasVisibleCard ? '' : 'none';
			});
		}

		async function handleMatchRecordSubmit() {
			const form = document.getElementById('matchRecordForm');
			const formData = new FormData(form);
			const data = Object.fromEntries(formData.entries());

			data.team1_deuce = data.team1_deuce.trim();
			data.team1_ad = data.team1_ad.trim();
			data.team2_deuce = data.team2_deuce.trim();
			data.team2_ad = data.team2_ad.trim();

			if (!data.team1_deuce || !data.team2_deuce || !data.team1_score || !data.team2_score) {
				alert('필수 선수 및 스코어 정보를 모두 입력해주세요.');
				return;
			}

			try {
				const response = await fetch('/matches', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(data),
				});

				const result = await response.json();

				// ✨ 변경점: 성공 시 모달만 닫도록 수정
				if (response.ok && result.success) {
					matchRecordModal.hide(); // 모달 닫기
				} else {
					alert(result.message || '기록 저장에 실패했습니다.');
				}
			} catch (error) {
				console.error('경기 기록 제출 오류:', error);
				alert('오류가 발생했습니다.');
			}
		}

		// ✨ '더보기' 클릭을 처리할 새로운 함수
		function handleShowMoreComments(event) {
			event.preventDefault(); // a 태그의 기본 동작 방지

			const btn = event.target;
			const scheduleId = btn.dataset.scheduleId;
			const card = document.getElementById(`schedule-${scheduleId}`);

			if (card) {
				// 해당 카드 내의 숨겨진 댓글들을 모두 보여줌
				card.querySelectorAll('.comment-item.hidden-comment').forEach(comment => {
					comment.classList.remove('hidden-comment');
				});

				// '더보기' 버튼 자신은 숨김
				btn.style.display = 'none';
			}
		}

		// ✨ 정산 체크박스 변경 이벤트 핸들러
		async function handleSettlementChange(event) {
			if (!selectedUser) return userSelectModal.show();

			const checkbox = event.target;
			const scheduleId = checkbox.dataset.scheduleId;
			const isChecked = checkbox.checked; // 사용자가 변경한 후의 상태

			// API 호출 중 중복 변경을 막기 위해 임시로 비활성화
			checkbox.disabled = true;

			try {
				const response = await fetch(`/api/schedule/${scheduleId}/toggle-calculation`, {
					method: 'POST'
				});

				const result = await response.json();

				if (!response.ok || !result.success) {
					// API 호출이 실패하면 사용자에게 알리고 체크박스를 원래 상태로 되돌림
					alert(result.message || '상태 변경에 실패했습니다.');
					checkbox.checked = !isChecked;
				}
				// 성공하면 UI는 이미 변경된 상태이므로 아무것도 하지 않음
			} catch (error) {
				console.error('Settlement Change Error:', error);
				alert('오류가 발생하여 상태를 변경하지 못했습니다.');
				checkbox.checked = !isChecked; // 에러 발생 시에도 원래 상태로 되돌림
			} finally {
				// API 호출이 끝나면 다시 활성화
				checkbox.disabled = false;
			}
		}

		function initializeNavigators() {
			const prevDate = new Date(currentYear, currentMonth - 2, 1);
			document.getElementById('prevMonth').href = `/schedule?year=${prevDate.getFullYear()}&month=${prevDate.getMonth() + 1}`;

			const nextDate = new Date(currentYear, currentMonth, 1);
			document.getElementById('nextMonth').href = `/schedule?year=${nextDate.getFullYear()}&month=${nextDate.getMonth() + 1}`;
		}

		function initializeUser() {
			const savedUser = localStorage.getItem('tennis-schedule-user');
			if (savedUser) {
				selectedUser = savedUser;
				document.getElementById('currentUser').textContent = selectedUser;
				scrollToUpcoming();
				checkAndShowNoticeModal();
			} else {
				userSelectModal.show();
			}
			// Always call updateAllSchedulesUI to ensure correct initial state of elements like checkboxes
			updateAllSchedulesUI();
		}

		function setupSideMenu() {
			const hamburger = document.querySelector('.hamburger-icon');
			const sideMenu = document.querySelector('.side-menu');
			const overlay = document.querySelector('.overlay');
			hamburger.addEventListener('click', () => {
				sideMenu.classList.toggle('active');
				overlay.classList.toggle('active');
			});
			overlay.addEventListener('click', () => {
				sideMenu.classList.remove('active');
				overlay.classList.remove('active');
			});
		}

		async function handleLogin() {
			const name = document.getElementById('loginName').value;
			const password = document.getElementById('loginPassword').value;

			if (!name || !password) {
				return alert('이름과 비밀번호를 입력하세요.');
			}
			try {
				const response = await fetch('/api/user/login', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ name, password })
				});
				const result = await response.json();
				if (response.ok && result.success) {
					selectUser(name); // 로그인 성공 시 사용자 선택 함수 호출
					userSelectModal.hide();
					document.getElementById('loginPassword').value = '';

					checkAndShowNoticeModal();
				} else {
					alert(result.message);
				}
			} catch (err) { console.error('Login error:', err); }
		}

		async function handleChangePassword() {
			const currentPassword = document.getElementById('currentPassword').value;
			const newPassword = document.getElementById('newPassword').value;
			const confirmNewPassword = document.getElementById('confirmNewPassword').value;

			if (!selectedUser) {
				return alert('먼저 사용자를 선택(로그인)해주세요.');
			}
			if (!currentPassword || !newPassword || !confirmNewPassword) {
				return alert('모든 비밀번호 필드를 입력하세요.');
			}
			if (newPassword !== confirmNewPassword) {
				return alert('새 비밀번호가 일치하지 않습니다.');
			}

			try {
				const response = await fetch('/api/user/change-password', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ name: selectedUser, currentPassword, newPassword })
				});
				const result = await response.json();

				alert(result.message); // 성공/실패 메시지 표시
				if (response.ok && result.success) {
					changePasswordModal.hide();
				}
			} catch (err) { console.error('Password change error:', err); }
		}

		function selectUser(name) {
			selectedUser = name;
			localStorage.setItem('tennis-schedule-user', name);
			document.getElementById('currentUser').textContent = selectedUser;
			updateAllSchedulesUI();
			scrollToUpcoming();
		}

		function checkAndShowNoticeModal() {
			const latestNoticeDateStr = appContainer.dataset.latestNoticeDate;
			if (!latestNoticeDateStr) {
				return; // 최신 공지가 없으면 종료
			}

			const latestNoticeDate = new Date(latestNoticeDateStr);
			const sevenDaysAgo = new Date();
			sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

			// 최신 공지가 7일 이내의 글인지 확인
			if (latestNoticeDate > sevenDaysAgo) {
				const noticeKey = 'seen-notice-' + latestNoticeDateStr;
				const hasSeen = localStorage.getItem(noticeKey);

				if (!hasSeen) {
					newNoticeModal.show();
				}
			}
		}

		// --- UI 업데이트 및 상호작용 ---
		function updateAllSchedulesUI() {
			document.querySelectorAll('.schedule-card').forEach(card => {
				updateSingleCardUI(card);
				card.querySelectorAll('.delete-comment-btn').forEach(btn => {
					btn.style.display = (btn.dataset.author === selectedUser) ? 'inline' : 'none';
				});
			});
		}

		function updateSingleCardUI(card) {
            const attendees = getAttendees(card.querySelector('.attendees-list'));
            const attendBtn = card.querySelector('.attend-btn');
            const attendeeCountSpan = card.querySelector('.attendee-count');
            const isAttending = attendees.includes(selectedUser);
            const maxAttendees = parseInt(card.dataset.maximum, 10);
            const isFull = attendees.length >= maxAttendees;

			const settleCheckbox = card.querySelector('.settlement-checkbox');
            if (settleCheckbox) {
                const booker = settleCheckbox.dataset.booker;
                const isBooker = selectedUser && selectedUser === booker;
                settleCheckbox.disabled = !isBooker;
            }

            card.classList.toggle('attending', isAttending);

            // stylePastSchedules 로직 이동
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const scheduleDate = new Date(card.dataset.date + 'T00:00:00');
            const isPastSchedule = scheduleDate < today; // 오늘보다 이전 날짜인지

            if (isPastSchedule) {
                card.classList.add('past-schedule');
            } else {
                card.classList.remove('past-schedule');
            }

            const isPast = card.classList.contains('past-schedule');

            const scheduleId = card.id.split('-')[1];
            const schedule = schedulesData.find(s => s.id == scheduleId);
            let isGroupRestricted = false;
            if (schedule && schedule.allowed_members && schedule.allowed_members.length > 0) {
                if (!isAttending && !schedule.allowed_members.includes(selectedUser)) {
                    isGroupRestricted = true;
                }
            }
            // [수정됨] 버튼을 항상 활성화하고, 모든 관련 스타일 클래스를 먼저 제거
            attendBtn.disabled = false;
            attendBtn.classList.remove('btn-primary', 'btn-outline-primary', 'btn-danger', 'btn-outline-danger');

            // [수정됨] 조건에 따라 버튼 텍스트와 스타일 클래스를 새로 추가
            if (isAttending) {
                attendBtn.textContent = '취소';
                // 지난 일정이면 outline, 아니면 일반 버튼
                attendBtn.classList.add(isPast ? 'btn-outline-danger' : 'btn-danger');
            } else {
                attendBtn.textContent = '참석';
                // 지난 일정이거나 인원이 가득 찼으면 outline, 아니면 일반 버튼
                if (isPast || isFull || isGroupRestricted) {
                    attendBtn.classList.add('btn-outline-primary');
                } else {
                    attendBtn.classList.add('btn-primary');
                }
            }

            attendeeCountSpan.style.color = isFull ? 'red' : '';

            // 오늘로부터 이틀 전인지 확인 (기록 버튼 비활성화용)
            const twoDaysAgo = new Date(today);
            twoDaysAgo.setDate(today.getDate() - 2);

            scheduleDate.setHours(0, 0, 0, 0);
            twoDaysAgo.setHours(0, 0, 0, 0);

            const recordBtn = card.querySelector('.record-btn');
            if (recordBtn) {
                if (scheduleDate <= twoDaysAgo || scheduleDate > today) { // 이틀 전 또는 미래의 일정인 경우
                    recordBtn.classList.remove('btn-success');
                    recordBtn.classList.add('btn-outline-success');
                } else {
                    recordBtn.classList.remove('btn-outline-success');
                    recordBtn.classList.add('btn-success');
                }
            }
        }

        

		function scrollToUpcoming() {
			const today = new Date();
			const pageDate = new Date(currentYear, currentMonth - 1, 1);

			// 현재 보고 있는 페이지가 이번 달이 아니면 함수를 종료합니다.
			if (today.getFullYear() !== pageDate.getFullYear() || today.getMonth() !== pageDate.getMonth()) {
				return;
			}

			today.setHours(0, 0, 0, 0); // 시간은 비교에서 제외
			const allCards = Array.from(document.querySelectorAll('.schedule-card'));

			// 가장 가까운 첫 번째 다가오는 일정 카드를 찾습니다.
			const firstUpcomingCard = allCards.find(card => new Date(card.dataset.date + 'T00:00:00') >= today);

			// 다가오는 일정이 없으면 함수를 종료합니다.
			if (!firstUpcomingCard) {
				return;
			}

			// 첫 번째 다가오는 일정의 날짜를 가져옵니다.
			const upcomingDate = firstUpcomingCard.dataset.date;

			// 모든 카드를 순회하며, 첫 번째 다가오는 일정과 날짜가 같은 모든 카드에 파란색 줄을 추가합니다.
			allCards.forEach(card => {
				if (card.dataset.date === upcomingDate) {
					card.classList.add('is-upcoming');
				}
			});

			// 화면 스크롤은 첫 번째 카드를 기준으로 이동합니다.
			firstUpcomingCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
		}

        async function handleAttendClick(event) {
			if (!selectedUser) return userSelectModal.show();

			const button = event.target;
			const card = button.closest('.schedule-card');
			const scheduleId = button.dataset.scheduleId;
			const schedule = schedulesData.find(s => s.id == scheduleId);
			const isAttending = button.textContent === '취소';

			if (card.classList.contains('past-schedule')) {
				alert("지난 일정은 참석 및 취소할 수 없습니다.");
				return;
			}

			if (schedule && schedule.allowed_members && schedule.allowed_members.length > 0) {
				if (!isAttending && !schedule.allowed_members.includes(selectedUser)) {
					alert(`'${schedule.group_name}' 그룹의 멤버만 참석할 수 있습니다.`);
					return;
				}
			}

			const attendees = getAttendees(card.querySelector('.attendees-list'));
			const maxAttendees = parseInt(card.dataset.maximum, 10);
			if (attendees.length >= maxAttendees && !isAttending) {
				alert("참석 인원이 가득 찼습니다.");
				return;
			}

			if (isAttending) {
				const scheduleDate = new Date(card.dataset.date + 'T00:00:00');
				const today = new Date();
				today.setHours(0, 0, 0, 0);
				const diff = scheduleDate.getTime() - today.getTime();
				const diffDays = diff / (1000 * 60 * 60 * 24);
				if (diffDays >= 0 && diffDays < 7) {
					const message = "❗ 일정 1주일 이내 참석 취소 ❗\n\n댓글을 통해 취소를 알려주세요.\n참석을 취소하시겠습니까?";
					if (!confirm(message)) {
						return;
					}
				}
			}

			button.disabled = true;
			const url = isAttending ? `/api/schedule/${scheduleId}/cancel` : `/api/schedule/${scheduleId}/attend`;

			try {
				const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ memberName: selectedUser }) });
				if (!response.ok) throw new Error('서버 응답 오류');

				const result = await response.json();
				if (result.success) {
					let currentAttendees = getAttendees(card.querySelector('.attendees-list'));
					let newAttendees = isAttending ? currentAttendees.filter(n => n !== selectedUser) : [...currentAttendees, selectedUser];

					card.querySelector('.attendee-count').textContent = newAttendees.length;
					
					// ✨ 수정된 핵심 부분: DOM을 직접 업데이트하는 함수 호출
					updateAttendeesDOM(card, newAttendees);
					
					updateSingleCardUI(card);

					const scheduleInJS = schedulesData.find(s => s.id == scheduleId);
					if (scheduleInJS) scheduleInJS.attendees = newAttendees;

				} else {
					alert(result.message);
					updateSingleCardUI(card);
				}
			} catch (error) {
				console.error('Error:', error);
				updateSingleCardUI(card);
			}
		}

		function updateAttendeesDOM(card, newAttendees) {
			const attendeesListEl = card.querySelector('.attendees-list');
			attendeesListEl.innerHTML = ''; // 기존 목록을 완전히 비웁니다.

			if (newAttendees.length > 0) {
				newAttendees.forEach((attendee, index) => {
					const gender = genderMap[attendee] || '';
					const genderClass = gender === '남' ? 'text-male' : (gender === '여' ? 'text-female' : '');
					
					const span = document.createElement('span');
					span.className = genderClass;
					span.textContent = attendee;
					
					attendeesListEl.appendChild(span);

					// 마지막 이름이 아니면 쉼표와 공백을 추가합니다.
					if (index < newAttendees.length - 1) {
						attendeesListEl.appendChild(document.createTextNode(', '));
					}
				});
			} else {
				attendeesListEl.textContent = '없음';
			}
		}

		function openCommentModal(scheduleId) {
			if (!selectedUser) return userSelectModal.show();
			currentScheduleId = scheduleId;
			document.getElementById('commentText').value = '';
			commentModal.show();
		}

		// 경기 기록 모달
		function openRecordModal(scheduleId) {
            const card = document.getElementById(`schedule-${scheduleId}`);
            const scheduleDate = new Date(card.dataset.date + 'T00:00:00');
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const twoDaysAgo = new Date(today);
            twoDaysAgo.setDate(today.getDate() - 2);
			
			scheduleDate.setHours(0, 0, 0, 0);
			twoDaysAgo.setHours(0, 0, 0, 0);

            if (scheduleDate > today) {
                alert("진행한 경기만 기록할 수 있습니다.");
                return;
            }

            if (scheduleDate <= twoDaysAgo) {
                alert("지난 일정은 기록할 수 없습니다. 관리자에게 문의해 주세요.");
                return;
            }

			if (!selectedUser) return userSelectModal.show();

			const schedule = schedulesData.find(s => s.id == scheduleId);
			if (!schedule) return; // 일정이 없으면 함수 종료

			const modal = document.getElementById('matchRecordModal');
			const datalist = modal.querySelector('#modal-player-list');
			const form = modal.querySelector('form');

			form.reset();

			// ✨ 참석자 및 게스트 목록으로 datalist 동적 생성
			datalist.innerHTML = '';

			// 1. 같은 날짜의 모든 일정에서 참석자 목록을 가져옵니다.
			const currentScheduleDate = schedule.schedule_date;
			const attendeesForDate = new Set();
			schedulesData.filter(s => s.schedule_date === currentScheduleDate)
				.forEach(s => {
					s.attendees.forEach(attendee => attendeesForDate.add(attendee));
				});

			// datalist에 참석자 추가
			Array.from(attendeesForDate).sort().forEach(attendee => {
				const option = document.createElement('option');
				option.value = attendee;
				datalist.appendChild(option);
			});

			// 2. 게스트 옵션 추가
			datalist.insertAdjacentHTML('beforeend', '<option value="게스트남"></option>');
			datalist.insertAdjacentHTML('beforeend', '<option value="게스트여"></option>');

			modal.querySelector('input[name="date"]').value = schedule.schedule_date;
			modal.querySelector('input[name="court"]').value = schedule.location;
			modal.querySelector('input[name="schedule_id"]').value = scheduleId;

			matchRecordModal.show();
		}

		async function submitComment() {
			const commentText = document.getElementById('commentText').value.trim();
			if (!commentText) return alert('댓글 내용을 입력하세요.');

			try {
				const response = await fetch('/api/comments', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ schedule_id: currentScheduleId, member_name: selectedUser, comment: commentText })
				});
				const result = await response.json();
				if (result.success) {
					addCommentToDOM(result.comment);
					commentModal.hide();
				} else { alert(result.message); }
			} catch (error) { console.error('Error:', error); }
		}

		function addCommentToDOM(comment) {
			const scheduleCard = document.getElementById(`schedule-${comment.schedule_id}`);
			let commentsSection = scheduleCard.querySelector('.comments-section');

			// 댓글 영역이 없으면 새로 생성
			if (!commentsSection) {
				const commentContainer = scheduleCard.querySelector('.comment-container');
				commentContainer.innerHTML = `
					<div class="comments-section">
						<div class="comment-list"></div>
					</div>`;
				commentsSection = scheduleCard.querySelector('.comments-section');
			}

			const commentList = commentsSection.querySelector('.comment-list');
			const newCommentHTML = `
				<div class="comment-item" id="comment-${comment.id}">
					<div class="text-muted">
						<div class="fw-bold">${comment.member_name}</div>
						<div>${comment.comment}</div>
					</div>
					<div>
						<span class="text-black-50" style="font-size: 0.7rem;">${comment.created_at}</span>
						<i class="bi bi-x-lg delete-comment-btn" data-comment-id="${comment.id}" data-author="${comment.member_name}"></i>
					</div>
				</div>`;
			commentList.insertAdjacentHTML('beforeend', newCommentHTML);

			const newDeleteBtn = commentList.querySelector(`#comment-${comment.id} .delete-comment-btn`);
			newDeleteBtn.style.display = (newDeleteBtn.dataset.author === selectedUser) ? 'inline' : 'none';
		}

		async function handleDeleteCommentClick(event) {
			const btn = event.target;
			const commentId = btn.dataset.commentId;

			if (confirm('정말로 댓글을 삭제하시겠습니까?')) {
				try {
					const response = await fetch(`/api/comments/${commentId}`, { method: 'DELETE' });
					const result = await response.json();
					if (result.success) {
						const commentItem = document.getElementById(`comment-${commentId}`);
						const commentList = commentItem.closest('.comment-list');
						const commentsSection = commentItem.closest('.comments-section');

						commentItem.remove(); // 댓글 DOM 요소 삭제

						// 마지막 댓글이 삭제되면 댓글 영역 전체를 삭제
						if (commentList && commentList.children.length === 0) {
							commentsSection.remove();
						}
					} else { alert(result.message); }
				} catch (error) { console.error('Error:', error); }
			}
		}

		// --- 헬퍼 함수 ---
		function getAttendees(element) {
			// attendees-list 내부에서 배경색 스타일이 적용된 모든 이름표(span)를 찾습니다.
			const nameSpans = element.querySelectorAll('.attendees-list > span');

			// 이름표가 없으면 빈 배열을 반환합니다.
			if (nameSpans.length === 0) {
				return [];
			}
			
			// 각 이름표(span)에서 텍스트(이름)만 추출하여 배열로 만듭니다.
			return Array.from(nameSpans).map(span => span.textContent.trim());
		}

		// --- 유예 신청 관련 함수들 ---
		async function loadPostponeData() {
			if (!selectedUser) {
				postponeModal.hide();
				userSelectModal.show();
				return;
			}

			const listContainer = document.getElementById('postponeListContainer');
			listContainer.innerHTML = `<div class="text-muted p-3">게시글을 불러오는 중...</div>`;

			try {
				const response = await fetch(`/api/postponements/${currentYear}/${currentMonth}`);
				const result = await response.json();

				if (!result.success) throw new Error(result.message);

				listContainer.innerHTML = ''; // 목록 초기화

				if (result.posts.length > 0) {
					result.posts.forEach(post => {
						const postElement = createPostElement(post);
						listContainer.appendChild(postElement);
					});
				} else {
					listContainer.innerHTML = `<div class="text-muted text-center p-3">등록된 신청이 없습니다.</div>`;
				}

			} catch (error) {
				listContainer.innerHTML = `<div class="text-danger text-center p-3">오류: ${error.message}</div>`;
			}
		}

		// 게시글 HTML 요소를 생성하는 함수
		function createPostElement(post) {
			const div = document.createElement('div');
			div.className = 'comment-item'; // 기존 댓글 CSS 재사용
			div.id = `postpone-${post.id}`;

			const isAuthor = post.member_name === selectedUser;
			const deleteBtnHTML = isAuthor
				? `<i class="bi bi-x-lg delete-postpone-btn" data-id="${post.id}" style="cursor: pointer; color: #dc3545; font-size: 0.8rem;"></i>`
				: '';

			div.innerHTML = `
				<div class="text-muted" style="min-width: 0;">
					<div class="fw-bold">${post.member_name}</div>
					<div style="word-break: break-word;">${post.content.replace(/\n/g, '<br>')}</div>
				</div>
				<div class="text-nowrap ps-3">
					<span class="text-black-50 me-2" style="font-size: 0.8rem;">${post.created_at}</span>
					${deleteBtnHTML}
				</div>
			`;

			if (isAuthor) {
				div.querySelector('.delete-postpone-btn').addEventListener('click', handleDeletePostpone);
			}
			return div;
		}

		async function handleSubmitPostpone() {
			const contentInput = document.getElementById('postponeContent');
			const content = contentInput.value.trim();

			if (!selectedUser) return userSelectModal.show();
			if (!content) return alert('내용을 입력해주세요.');

			try {
				const response = await fetch('/api/postponements', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						year: currentYear,
						month: currentMonth,
						memberName: selectedUser,
						content: content
					})
				});
				const result = await response.json();

				if (result.success) {
					contentInput.value = '';
					const listContainer = document.getElementById('postponeListContainer');
					
					// ✨ [수정] "등록된 신청이 없습니다" 메시지를 더 정확하게 찾아 제거합니다.
					const noPostMessage = listContainer.querySelector('.text-center');
					if (noPostMessage) {
						listContainer.innerHTML = '';
					}

					const newPostElement = createPostElement(result.post);
					listContainer.appendChild(newPostElement);
					
				} else {
					alert(result.message || '등록에 실패했습니다.');
				}
			} catch (error) {
				alert('오류가 발생했습니다: ' + error.message);
			}
		}

		async function handleDeletePostpone(event) {
			const postId = event.target.dataset.id;

			if (!confirm('정말로 삭제하시겠습니까?')) return;

			try {
				const response = await fetch(`/api/postponements/${postId}`, {
					method: 'DELETE',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ memberName: selectedUser }) // 본인 확인용
				});
				const result = await response.json();

				if (result.success) {
					document.getElementById(`postpone-${postId}`).remove();
				} else {
					alert(result.message || '삭제에 실패했습니다.');
				}
			} catch (error) {
				alert('오류가 발생했습니다: ' + error.message);
			}
		}
	</script>
</body>

</html>