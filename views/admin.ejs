<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="apple-touch-icon" href="/image/btw.png" />
    <link rel="icon" type="image/png" href="/image/btw.png" />
    <title>불꽃테니스 관리자</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="/css/common.css">
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; overflow-y: auto; }
        .admin-header { background-color: white; padding: 0px 5px; display: flex; justify-content: space-between; align-items: center; position: static; top: 0; left: 0; width: 100%; height: 60px; box-sizing: border-box; z-index: 1000; box-shadow: 0 2px 4px rgba(0, 0, 0, .05); }
        .admin-container { display: flex; width: 100%; flex-grow: 1; }
        .main-content { padding: 20px 10px; box-sizing: border-box; flex-grow: 1; width: 100%; overflow-y: auto; font-size: 1rem; }
        .main-content * { font-size: 0.9rem; }
        .main-content button { width: 100%; }
        .form-row { display: flex; align-items: center; margin-bottom: 10px; }
        .form-row label { width: 80px; margin-right: 10px; margin-bottom: 0; text-align: center; }
        .form-row input, .form-row select { flex: 1; }
        .logout-button { display: block; width: 100%; margin-top: 15px; }
        .attendee-list { max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 4px; }
        .modal-body * { font-size: 0.9rem; }
    </style>
</head>
<body>
    <header class="admin-header">
        <div class="d-flex align-items-center flex-grow-1">
            <a href="/schedule"><img src="/image/btw-tran-180x180.png" alt="로고" style="height: 35px; margin-right: 5px;"></a>
            <a href="/admin" style="color: black; text-decoration: none;"><h5 style="margin-bottom: 0;"><b>불꽃테니스 관리자</b></h5></a>
        </div>
    </header>
    <div class="admin-container">
        <div class="main-content">
            <div class="accordion" id="adminAccordion">

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAddSchedule"><i class="bi bi-calendar-plus"></i>&nbsp;&nbsp;일정 등록</button></h2>
                    <div id="collapseAddSchedule" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <form id="addScheduleForm">
                                <div class="form-row"><label for="addDate">날짜</label><input type="date" id="addDate" name="schedule_date" class="form-control" required></div>
                                <div class="form-row"><label for="addStartTime">시작 시간</label><input type="time" id="addStartTime" name="start_time" class="form-control" value="20:00" required></div>
                                <div class="form-row"><label for="addEndTime">종료 시간</label><input type="time" id="addEndTime" name="end_time" class="form-control" value="22:00" required></div>
                                <div class="form-row"><label for="addLocation">장소</label><input type="text" id="addLocation" name="location" class="form-control" required></div>
                                <div class="form-row"><label for="addBooker">예약자</label><input type="text" id="addBooker" name="booker" class="form-control" list="memberNames" required></div>
                                <div class="form-row"><label for="addPrice">코트비</label><input type="number" id="addPrice" name="price" class="form-control" required></div>
                                <div class="form-row"><label for="addMaximum">최대 인원</label><input type="number" id="addMaximum" name="maximum" class="form-control" value="6" required></div>
                                <div class="form-row"><label for="addNotes">설명</label><input type="text" id="addNotes" name="notes" class="form-control" placeholder="여복데이, 정기대관 등"></div>
                                <div class="form-row">
                                    <label for="addGroupId">그룹</label>
                                    <select id="addGroupId" name="group_id" class="form-select">
                                        <option value="">-- 그룹 없음 --</option>
                                    </select>
                                </div>
                                <div class="form-row">
                                    <label for="addIsSpecialMatch">리그ㆍ교류전 여부</label>
                                    <select id="addIsSpecialMatch" name="is_special_match" class="form-select">
                                        <option value="N" selected>아니오</option>
                                        <option value="Y">예</option>
                                    </select>
                                </div>
                                <div class="form-row">
                                    <label for="addTotalCourtNum">코트 수</label>
                                    <input type="number" id="addTotalCourtNum" name="total_court_num" class="form-control" placeholder="리그ㆍ교류전인 경우 입력">
                                </div>
                                <div class="form-row">
                                    <label for="addTotalRoundNum">라운드 수</label>
                                    <input type="number" id="addTotalRoundNum" name="total_round_num" class="form-control" placeholder="리그ㆍ교류전인 경우 입력">
                                </div>
                                <button type="submit" class="btn btn-sm btn-primary">일정 등록</button>
                            </form>
                            <p id="addScheduleMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseManageSchedule"><i class="bi bi-calendar-minus"></i>&nbsp;&nbsp;일정 관리</button></h2>
                    <div id="collapseManageSchedule" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <button id="selectScheduleBtn" class="btn btn-sm btn-secondary mb-3">일정 선택</button>
                            <form id="updateScheduleForm" style="display:none;">
                                <div class="form-row"><label for="updateId">일정 ID</label><input type="number" id="updateId" name="id" class="form-control" readonly></div>
                                <div class="form-row"><label for="updateDate">날짜</label><input type="date" id="updateDate" name="schedule_date" class="form-control" required></div>
                                <div class="form-row"><label for="updateStartTime">시작 시간</label><input type="time" id="updateStartTime" name="start_time" class="form-control" required></div>
                                <div class="form-row"><label for="updateEndTime">종료 시간</label><input type="time" id="updateEndTime" name="end_time" class="form-control" required></div>
                                <div class="form-row"><label for="updateLocation">장소</label><input type="text" id="updateLocation" name="location" class="form-control" required></div>
                                <div class="form-row"><label for="updateBooker">예약자</label><input type="text" id="updateBooker" name="booker" class="form-control" list="memberNames" required></div>
                                <div class="form-row"><label for="updatePrice">코트비</label><input type="number" id="updatePrice" name="price" class="form-control" required></div>
                                <div class="form-row"><label for="updateMaximum">최대 인원</label><input type="number" id="updateMaximum" name="maximum" class="form-control" required></div>
                                <div class="form-row"><label for="updateNotes">설명</label><input type="text" id="updateNotes" name="notes" class="form-control"></div>
                                <div class="form-row">
                                    <label for="updateGroupId">그룹</label>
                                    <select id="updateGroupId" name="group_id" class="form-select">
                                        <option value="">-- 그룹 없음 --</option>
                                    </select>
                                </div>
                                <div class="form-row"><label for="updateCalculated">정산 여부</label><select id="updateCalculated" name="calculated" class="form-select"><option value="N">미완료</option><option value="Y">완료</option></select></div>
                                <div class="form-row">
                                    <label for="updateIsSpecialMatch">리그ㆍ교류전 여부</label>
                                    <select id="updateIsSpecialMatch" name="is_special_match" class="form-select">
                                        <option value="N">아니오</option>
                                        <option value="Y">예</option>
                                    </select>
                                </div>
                                <div class="form-row">
                                    <label for="updateTotalCourtNum">코트 수</label>
                                    <input type="number" id="updateTotalCourtNum" name="total_court_num" class="form-control" placeholder="리그ㆍ교류전인 경우 입력">
                                </div>
                                <div class="form-row">
                                    <label for="updateTotalRoundNum">라운드 수</label>
                                    <input type="number" id="updateTotalRoundNum" name="total_round_num" class="form-control" placeholder="리그ㆍ교류전인 경우 입력">
                                </div>
                                <button type="submit" class="btn btn-sm btn-success">일정 수정</button>
                                <button id="deleteScheduleBtn" type="button" class="btn btn-sm btn-danger mt-2">일정 삭제</button>
                            </form>
                            <p id="manageScheduleMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseManageAttendance"><i class="bi bi-calendar-check"></i>&nbsp;&nbsp;일정 참석 관리</button></h2>
                    <div id="collapseManageAttendance" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                         <div class="accordion-body">
                            <button id="selectScheduleForAttendanceBtn" class="btn btn-sm btn-secondary mb-3">일정 선택</button>
                            <div id="attendanceScheduleInfo" class="mb-2 p-2 border rounded bg-light" style="display: none;"></div>
                            <div id="attendeeListContainer" class="attendee-list mb-3" style="display: none;"></div>
                            <div id="attendanceActionButtons" class="d-flex justify-content-between" style="display: none!important;">
                                <button id="addAttendeeBtn" class="btn btn-sm btn-primary me-2">참석자 추가</button>
                                <button id="deleteAttendeesBtn" class="btn btn-sm btn-danger">참석자 삭제</button>
                            </div>
                            <p id="manageAttendanceMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAddMatchRecord"><i class="bi bi-journal-plus"></i>&nbsp;&nbsp;경기 기록 등록</button></h2>
                    <div id="collapseAddMatchRecord" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <form id="addMatchRecordForm">
                                <div class="form-row"><label for="addMatchDate">날짜</label><input type="date" id="addMatchDate" name="date" class="form-control" required></div>
                                <div class="form-row"><label for="addMatchCourt">코트</label><input type="text" id="addMatchCourt" name="court" class="form-control" list="court-list" required></div>
                                <div class="border p-3 rounded my-2">
                                    <div class="row">
                                        <div class="col text-center">
                                            <label class="form-label small">듀스코트(포)</label>
                                            <input type="text" name="team1_deuce" class="form-control" list="memberNames" required>
                                        </div>
                                        <div class="col-auto d-flex align-items-end p-0">
                                            <button type="button" class="btn swap-btn px-0" data-form-id="addMatchRecordForm" data-team="1"><i class="bi bi-arrow-left-right"></i></button>
                                        </div>
                                        <div class="col text-center">
                                            <label class="form-label small">애드코트(백)</label>
                                            <input type="text" name="team1_ad" class="form-control" list="memberNames">
                                        </div>
                                        <div class="col-auto text-center">
                                            <label class="form-label small">스코어</label>
                                            <select class="form-select text-center" name="team1_score" required>
                                                <% for(let i = 0; i <= 7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center fw-bold my-2">VS</div>
                                <div class="border p-3 rounded my-2">
                                    <div class="row">
                                        <div class="col text-center">
                                            <label class="form-label small">듀스코트(포)</label>
                                            <input type="text" name="team2_deuce" class="form-control" list="memberNames" required>
                                        </div>
                                        <div class="col-auto d-flex align-items-end p-0">
                                            <button type="button" class="btn swap-btn px-0" data-form-id="addMatchRecordForm" data-team="2"><i class="bi bi-arrow-left-right"></i></button>
                                        </div>
                                        <div class="col text-center">
                                            <label class="form-label small">애드코트(백)</label>
                                            <input type="text" name="team2_ad" class="form-control" list="memberNames">
                                        </div>
                                        <div class="col-auto text-center">
                                            <label class="form-label small">스코어</label>
                                            <select class="form-select text-center" name="team2_score" required>
                                                <% for(let i = 0; i <= 7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-row"><label for="addMatchVideo">영상 링크</label><input type="url" id="addMatchVideo" name="video" class="form-control"></div>
                                <div class="form-row"><label for="addMatchEtc">비고</label><input id="addMatchEtc" name="etc" class="form-control" placeholder="검색 시 활용"></div>
                                <button type="submit" class="btn btn-sm btn-primary">경기 기록 등록</button>
                            </form>
                            <p id="addMatchMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseManageMatchRecord"><i class="bi bi-journal-minus"></i>&nbsp;&nbsp;경기 기록 관리</button></h2>
                    <div id="collapseManageMatchRecord" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <button id="selectMatchRecordBtn" class="btn btn-sm btn-secondary mb-3">경기 기록 선택</button>
                            <form id="updateMatchRecordForm" style="display:none;">
                                <input type="hidden" id="updateMatchId" name="id">
                                <div class="form-row"><label for="updateMatchDate">날짜</label><input type="date" id="updateMatchDate" name="date" class="form-control" required></div>
                                <div class="form-row"><label for="updateMatchCourt">코트</label><input type="text" id="updateMatchCourt" name="court" class="form-control" list="court-list" required></div>
                                <div class="border p-3 rounded my-2">
                                    <div class="row">
                                        <div class="col text-center">
                                            <label class="form-label small">듀스코트(포)</label>
                                            <input type="text" id="updateMatchT1Deuce" name="team1_deuce" class="form-control" list="memberNames" required>
                                        </div>
                                        <div class="col-auto d-flex align-items-end p-0">
                                            <button type="button" class="btn swap-btn px-0" data-form-id="updateMatchRecordForm" data-team="1"><i class="bi bi-arrow-left-right"></i></button>
                                        </div>
                                        <div class="col text-center">
                                            <label class="form-label small">애드코트(백)</label>
                                            <input type="text" id="updateMatchT1Ad" name="team1_ad" class="form-control" list="memberNames">
                                        </div>
                                        <div class="col-auto text-center">
                                            <label class="form-label small">스코어</label>
                                            <select class="form-select text-center" id="updateMatchT1Score" name="team1_score" required>
                                                <% for(let i = 0; i <= 7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center fw-bold my-2">VS</div>
                                <div class="border p-3 rounded my-2">
                                    <div class="row">
                                        <div class="col text-center">
                                            <label class="form-label small">듀스코트(포)</label>
                                            <input type="text" id="updateMatchT2Deuce" name="team2_deuce" class="form-control" list="memberNames" required>
                                        </div>
                                        <div class="col-auto d-flex align-items-end p-0">
                                            <button type="button" class="btn swap-btn px-0" data-form-id="updateMatchRecordForm" data-team="2"><i class="bi bi-arrow-left-right"></i></button>
                                        </div>
                                        <div class="col text-center">
                                            <label class="form-label small">애드코트(백)</label>
                                            <input type="text" id="updateMatchT2Ad" name="team2_ad" class="form-control" list="memberNames">
                                        </div>
                                        <div class="col-auto text-center">
                                            <label class="form-label small">스코어</label>
                                            <select class="form-select text-center" id="updateMatchT2Score" name="team2_score" required>
                                                <% for(let i = 0; i <= 7; i++) { %><option value="<%= i %>"><%= i %></option><% } %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-row"><label for="updateMatchVideo">영상 링크</label><input type="url" id="updateMatchVideo" name="video" class="form-control"></div>
                                <div class="form-row"><label for="updateMatchEtc">비고</label><input id="updateMatchEtc" name="etc" class="form-control" placeholder="검색 시 활용"></div>
                                <button type="submit" class="btn btn-sm btn-success">경기 기록 수정</button>
                                <button id="deleteMatchRecordBtn" type="button" class="btn btn-sm btn-danger mt-2">경기 기록 삭제</button>
                            </form>
                            <p id="manageMatchMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>
                
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingAddMember"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAddMember"><i class="bi bi-person-add"></i>&nbsp;&nbsp;멤버 등록</button></h2>
                    <div id="collapseAddMember" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <form id="addMemberForm">
                                <div class="form-row"><label for="addMemberName">이름</label><input type="text" id="addMemberName" name="name" class="form-control" required></div>
                                <div class="form-row"><label for="addMemberGender">성별</label><select id="addMemberGender" name="gender" class="form-select"><option value="남">남</option><option value="여">여</option></select></div>
                                <div class="form-row"><label for="addMemberBirth">생년월일</label><input type="date" id="addMemberBirth" name="birth" class="form-control"></div>
                                <div class="form-row"><label for="addMemberPhone">연락처</label><input type="tel" id="addMemberPhone" name="phone" class="form-control" placeholder="010-1234-5678"></div>
                                <div class="form-row">
                                    <label for="addMemberOrder">회원 구분</label>
                                    <select id="addMemberOrder" name="order" class="form-select" required>
                                        <option value="0">정회원</option>
                                        <option value="2">비회원</option>
                                    </select>
                                </div>
                                <div class="form-row"><label for="addMemberEtc">비고</label><input type="text" id="addMemberEtc" name="etc" class="form-control" placeholder="게스트, 교류전, 탈퇴 등"></div>
                                <button type="submit" class="btn btn-sm btn-primary">멤버 등록</button>
                            </form>
                            <p id="addMemberMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingManageMember"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseManageMember"><i class="bi bi-person-gear"></i>&nbsp;&nbsp;멤버 관리</button></h2>
                    <div id="collapseManageMember" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <button id="selectMemberBtn" class="btn btn-sm btn-secondary mb-3">멤버 선택</button>
                            <form id="updateMemberForm" style="display:none;">
                                <div class="form-row"><label for="originalMemberName">이름</label><input type="text" id="originalMemberName" name="originalName" class="form-control" readonly></div>
                                <div class="form-row" style="display: none;"><label for="updateMemberName">새 이름</label><input type="text" id="updateMemberName" name="name" class="form-control" required></div>
                                <div class="form-row"><label for="updateMemberGender">성별</label><select id="updateMemberGender" name="gender" class="form-select"><option value="남">남</option><option value="여">여</option></select></div>
                                <div class="form-row"><label for="updateMemberBirth">생년월일</label><input type="date" id="updateMemberBirth" name="birth" class="form-control"></div>
                                <div class="form-row"><label for="updateMemberPhone">연락처</label><input type="tel" id="updateMemberPhone" name="phone" class="form-control" placeholder="010-1234-5678"></div>
                                <div class="form-row">
                                    <label for="updateMemberOrder">회원 구분</label>
                                    <select id="updateMemberOrder" name="order" class="form-select" required>
                                        <option value="0">정회원</option>
                                        <option value="2">비회원</option>
                                    </select>
                                </div>                                
                                <div class="form-row"><label for="updateMemberEtc">비고</label><input type="text" id="updateMemberEtc" name="etc" class="form-control" placeholder="게스트, 교류전, 탈퇴 등"></div>
                                <button type="submit" class="btn btn-sm btn-success">멤버 수정</button>
                                <button id="resetPasswordBtn" type="button" class="btn btn-sm btn-warning mt-2">비밀번호 초기화</button>
                                <button id="deleteMemberBtn" type="button" class="btn btn-sm btn-danger mt-2">멤버 삭제</button>
                            </form>
                            <p id="manageMemberMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseManageGroup"><i class="bi bi-people"></i>&nbsp;&nbsp;그룹 관리</button></h2>
                    <div id="collapseManageGroup" class="accordion-collapse collapse" data-bs-parent="#adminAccordion">
                        <div class="accordion-body">
                            <button id="addGroupBtn" class="btn btn-sm btn-primary me-2">그룹 추가</button>
                            <button id="selectGroupBtn" class="btn btn-sm btn-secondary mt-2">그룹 선택</button>
                            <div id="groupInfoContainer" style="display:none;">
                                <div id="selectedGroupName" class="mt-2 mb-2 p-2 border rounded bg-light"></div>
                                <div id="groupMemberListContainer" class="attendee-list mb-3"></div>
                                <div class="d-flex justify-content-between">
                                    <button id="addGroupMemberBtn" class="btn btn-sm btn-primary me-2">그룹 멤버 추가</button>
                                    <button id="deleteGroupMembersBtn" class="btn btn-sm btn-danger">그룹 멤버 삭제</button>
                                </div>
                                <button id="deleteGroupBtn" class="btn btn-sm btn-danger mt-2">그룹 삭제</button>
                            </div>
                            <p id="manageGroupMessage" class="mt-3"></p>
                        </div>
                    </div>
                </div>

            </div>
            <a href="/" class="btn btn-sm btn-secondary logout-button">불꽃 홈으로</a>
            <a href="/admin/logout" class="btn btn-sm btn-outline-secondary logout-button">로그아웃</a>
        </div>
    </div>

    <div class="modal fade" id="listModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="listModalLabel"></h6><button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body"><input type="text" id="listSearchInput" class="form-control mb-3" placeholder="검색">
                    <ul id="listModalBody" class="list-group"></ul>
                </div>
            </div>
        </div>
    </div>

    <datalist id="memberNames"></datalist>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const listModalEl = document.getElementById('listModal');
            const listModal = new bootstrap.Modal(listModalEl);
            let modalContext = ''; 
            
            let allMembers = [];
            let allSchedules = [];
            let allMatchRecords = [];
            let allGroups = [];
            let currentGroupId = null;

            // --- 데이터 로드 ---
            const fetchData = async (url, targetArray, displayFn) => {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data.success) {
                        targetArray.splice(0, targetArray.length, ...data[Object.keys(data)[1]]);
                        if(displayFn) displayFn(targetArray);
                    }
                } catch (error) { console.error(`${url} 로딩 오류:`, error); }
            };

            const loadInitialData = () => {
                fetchData('/api/admin/members', allMembers, (members) => {
                    const memberNamesDatalist = document.getElementById('memberNames');
                    memberNamesDatalist.innerHTML = '';
                    members.forEach(member => {
                        const option = document.createElement('option');
                        option.value = member.name;
                        memberNamesDatalist.appendChild(option);
                    });
                });
                fetchData('/api/admin/schedules', allSchedules);
                fetchData('/api/admin/matchrecords', allMatchRecords);
                fetchData('/api/admin/groups', allGroups, (groups) => {
                    const groupSelects = [document.getElementById('addGroupId'), document.getElementById('updateGroupId')];
                    groupSelects.forEach(select => {
                        select.innerHTML = '<option value="">-- 그룹 없음 --</option>'; // 기본 옵션
                        groups.forEach(group => {
                            select.innerHTML += `<option value="${group.id}">${group.group_name}</option>`;
                        });
                    });
                });
            };
            
            loadInitialData();

            // --- 공통 액션 함수 ---
            const showMessage = (msg, elementId, color) => {
                const el = document.getElementById(elementId);
                el.textContent = msg;
                el.style.color = color;
                setTimeout(() => el.textContent = '', 3000);
            };

            const highlightText = (text, keywords) => {
                if (!keywords || !keywords.length) {
                    return text;
                }
                const regex = new RegExp(keywords.join('|'), 'gi');
                return text.replace(regex, (match) => `<strong>${match}</strong>`);
            };
            
            const handleFormSubmit = (url, msgElementId, formId, additionalData = {}) => async (event) => {
                if(event) event.preventDefault();
                let data = {};
                if(formId){
                     data = Object.fromEntries(new FormData(document.getElementById(formId)).entries());
                }
                Object.assign(data, additionalData);

                // 경기 기록 저장 시 선수 이름 앞뒤 공백 제거
                if (formId === 'addMatchRecordForm' || formId === 'updateMatchRecordForm') {
                    if (data.team1_deuce) data.team1_deuce = data.team1_deuce.trim();
                    if (data.team1_ad) data.team1_ad = data.team1_ad.trim();
                    if (data.team2_deuce) data.team2_deuce = data.team2_deuce.trim();
                    if (data.team2_ad) data.team2_ad = data.team2_ad.trim();
                }

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                    });
                    const result = await response.json();
                    showMessage(result.message, msgElementId, result.success ? 'green' : 'red');
                    if (result.success) {
                        if (formId) document.getElementById(formId).reset();
                        loadInitialData();
                    }
                } catch (error) {
                    showMessage(`오류: ${error.message}`, msgElementId, 'red');
                }
            };
            
            const handleDelete = async (url, body, msgElementId, callback) => {
                 try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body),
                    });
                    const result = await response.json();
                    showMessage(result.message, msgElementId, result.success ? 'green' : 'red');
                    if (result.success) {
                         if (callback) callback();
                         loadInitialData();
                   }
                } catch (error) {
                     showMessage(`오류: ${error.message}`, msgElementId, 'red');
                }
            };

            // --- 모달 열기/닫기 및 컨텍스트 관리 ---
            const openModal = (title, items, displayFn, context) => {
                document.getElementById('listSearchInput').value = '';
                modalContext = context;
                document.getElementById('listModalLabel').textContent = title;
                displayFn(items);
                listModal.show();
            };

            document.getElementById('listSearchInput').addEventListener('keyup', (e) => {
                const keywords = e.target.value.toLowerCase().trim().split(/\s+/).filter(Boolean);

                if (modalContext === 'manageSchedule' || modalContext === 'manageAttendance') {
                    const filtered = allSchedules.filter(s => {
                        const targetText = `${s.schedule_date} | ${s.start_time.slice(0,5)}-${s.end_time.slice(0,5)} | ${s.location} | ${s.notes || ''} | ${s.group_name || ''}`.toLowerCase();
                        return keywords.every(kw => targetText.includes(kw));
                    });
                    displaySchedules(filtered, keywords);
                } else if (modalContext === 'manageMember' || modalContext === 'addAttendee' || modalContext === 'addGroupMember') {
                    const filtered = allMembers.filter(m => {
                        const orderText = m.order == 0? "정회원" : "비회원";
                        const targetText = `${m.name} | ${m.gender} | ${orderText} | ${m.etc}`.toLowerCase();
                        return keywords.every(kw => targetText.includes(kw));
                    });
                    displayMembers(filtered, keywords);
                } else if (modalContext === 'manageMatchRecord') {
                    const filtered = allMatchRecords.filter(r => {
                        const targetText = `${r.date} | ${r.court} | ${r.team1_deuce}/${r.team1_ad || ''} vs ${r.team2_deuce}/${r.team2_ad || ''}`.toLowerCase();
                        return keywords.every(kw => targetText.includes(kw));
                    });
                    displayMatchRecords(filtered, keywords);
                } else if (modalContext === 'manageGroup') {
                    const filtered = allGroups.filter(g => {
                        const targetText = g.group_name.toLowerCase();
                        return keywords.every(kw => targetText.includes(kw));
                    });
                    displayGroups(filtered, keywords);
                }
            });

            // --- 이벤트 리스너 ---
            // 일정
            document.getElementById('selectScheduleBtn').addEventListener('click', () => openModal('일정 선택', allSchedules, displaySchedules, 'manageSchedule'));
            document.getElementById('selectScheduleForAttendanceBtn').addEventListener('click', () => openModal('일정 선택', allSchedules, displaySchedules, 'manageAttendance'));
            document.getElementById('addScheduleForm').addEventListener('submit', handleFormSubmit('/admin/add-schedule', 'addScheduleMessage', 'addScheduleForm'));
            document.getElementById('updateScheduleForm').addEventListener('submit', handleFormSubmit('/admin/update-schedule', 'manageScheduleMessage', 'updateScheduleForm'));
            document.getElementById('deleteScheduleBtn').addEventListener('click', () => {
                const id = document.getElementById('updateId').value;
                if(confirm(`일정(ID: ${id})을 삭제하시겠습니까?`)) {
                    handleDelete('/admin/delete-schedule', { scheduleId: id }, 'manageScheduleMessage', () => {
                        document.getElementById('updateScheduleForm').style.display = 'none';
                        document.getElementById('updateScheduleForm').reset();
                    });
                }
            });

            // 멤버
            document.getElementById('selectMemberBtn').addEventListener('click', () => openModal('멤버 선택', allMembers, displayMembers, 'manageMember'));
            document.getElementById('addMemberForm').addEventListener('submit', handleFormSubmit('/admin/add-member', 'addMemberMessage', 'addMemberForm'));
            document.getElementById('updateMemberForm').addEventListener('submit', handleFormSubmit('/admin/update-member', 'manageMemberMessage', 'updateMemberForm'));
            document.getElementById('deleteMemberBtn').addEventListener('click', () => {
                const name = document.getElementById('originalMemberName').value;
                if(confirm(`${name} 멤버를 삭제하시겠습니까?`)) {
                    handleDelete('/admin/delete-member', { name: name }, 'manageMemberMessage', () => {
                        document.getElementById('updateMemberForm').style.display = 'none';
                        document.getElementById('updateMemberForm').reset();
                    });
                }
            });
            document.getElementById('resetPasswordBtn').addEventListener('click', () => {
                 const name = document.getElementById('originalMemberName').value;
                if(confirm(`${name}의 비밀번호를 0000으로 초기화하시겠습니까?`)) {
                      handleFormSubmit('/admin/reset-password', 'manageMemberMessage', null, { name: name })();
                }
            });
            
            // 참석자
            document.getElementById('addAttendeeBtn').addEventListener('click', () => openModal('참석자 추가', allMembers, displayMembers, 'addAttendee'));
            document.getElementById('deleteAttendeesBtn').addEventListener('click', async () => {
                const selectedCheckboxes = document.querySelectorAll('#attendeeListContainer input:checked');
                const memberNames = Array.from(selectedCheckboxes).map(cb => cb.value);
                if (memberNames.length === 0) return showMessage('삭제할 참석자를 선택하세요', 'manageAttendanceMessage', 'red');
                if (confirm(`${memberNames.join(', ')}님을 정말로 참석 취소하시겠습니까?`)) {
                    await handleFormSubmit('/api/admin/schedule/delete-attendees', 'manageAttendanceMessage', null, { scheduleId: document.getElementById('attendanceScheduleInfo').dataset.id, memberNames })();
                    fetchAndDisplayAttendees(document.getElementById('attendanceScheduleInfo').dataset.id);
                }
            });
            
            document.getElementById('addMatchRecordForm').addEventListener('submit', handleFormSubmit('/admin/add-match', 'addMatchMessage', 'addMatchRecordForm'));
            document.getElementById('updateMatchRecordForm').addEventListener('submit', handleFormSubmit('/admin/update-match', 'manageMatchMessage', 'updateMatchRecordForm'));
            document.getElementById('selectMatchRecordBtn').addEventListener('click', () => openModal('경기 기록 선택', allMatchRecords, displayMatchRecords, 'manageMatchRecord'));
            document.getElementById('deleteMatchRecordBtn').addEventListener('click', () => {
                const id = document.getElementById('updateMatchId').value;
                if(confirm(`경기 기록(ID: ${id})을 삭제하시겠습니까?`)) {
                    handleDelete('/admin/delete-match', { matchId: id }, 'manageMatchMessage', () => {
                        document.getElementById('updateMatchRecordForm').style.display = 'none';
                        document.getElementById('updateMatchRecordForm').reset();
                    });
                }
            });
            
            // 그룹
            document.getElementById('addGroupBtn').addEventListener('click', async () => {
                const groupName = prompt('추가할 그룹 이름을 입력하세요:');
                if (groupName) {
                    await handleFormSubmit('/api/admin/groups', 'manageGroupMessage', null, { groupName })();
                    loadInitialData(); // 그룹 목록 갱신
                }
            });
            document.getElementById('selectGroupBtn').addEventListener('click', () => openModal('그룹 선택', allGroups, displayGroups, 'manageGroup'));
            document.getElementById('addGroupMemberBtn').addEventListener('click', () => {
                if (!currentGroupId) {
                    showMessage('먼저 관리할 그룹을 선택해주세요.', 'manageGroupMessage', 'red');
                    return;
                }
                openModal('그룹에 추가할 멤버 선택', allMembers, displayMembers, 'addGroupMember');
            });
            document.getElementById('deleteGroupMembersBtn').addEventListener('click', async () => {
                const selectedCheckboxes = document.querySelectorAll('#groupMemberListContainer input:checked');
                const memberIds = Array.from(selectedCheckboxes).map(cb => cb.dataset.id);
                if (memberIds.length === 0) return showMessage('삭제할 멤버를 선택하세요', 'manageGroupMessage', 'red');
                if (confirm('선택된 멤버를 그룹에서 삭제하시겠습니까?')) {
                    await handleFormSubmit('/api/admin/groups/members/delete', 'manageGroupMessage', null, { groupId: currentGroupId, memberIds })();
                    fetchAndDisplayGroupMembers(currentGroupId);
                }
            });
            document.getElementById('deleteGroupBtn').addEventListener('click', () => {
                if (!currentGroupId) {
                    showMessage('삭제할 그룹이 선택되지 않았습니다.', 'manageGroupMessage', 'red');
                    return;
                }
                const groupName = document.getElementById('selectedGroupName').textContent;
                if (confirm(`'${groupName}' 그룹을 정말로 삭제하시겠습니까?\n그룹에 속한 모든 멤버 정보도 함께 삭제됩니다.`)) {
                    handleDelete('/api/admin/groups/delete', { groupId: currentGroupId }, 'manageGroupMessage', () => {
                        document.getElementById('groupInfoContainer').style.display = 'none';
                        currentGroupId = null;
                    });
                }
            });

            // 스왑 버튼
            document.querySelectorAll('.swap-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const formId = this.dataset.formId;
                    const team = this.dataset.team;
                    const form = document.getElementById(formId);
                    if (form) {
                        const deuceInput = form.querySelector(`input[name="team${team}_deuce"]`);
                        const adInput = form.querySelector(`input[name="team${team}_ad"]`);
                        if (deuceInput && adInput) {
                            const tempValue = deuceInput.value;
                            deuceInput.value = adInput.value;
                            adInput.value = tempValue;
                        }
                    }
                });
            });

            // --- UI 렌더링 함수 ---
            const createListItem = (item, text, context, handler) => {
                const li = document.createElement('li');
                li.className = 'list-group-item list-group-item-action';
                li.innerHTML = text; 
                li.addEventListener('click', () => {
                    handler(item);
                    listModal.hide();
                });
                return li;
            };

            const displaySchedules = (schedules, keywords = []) => {
                const listBody = document.getElementById('listModalBody');
                listBody.innerHTML = '';
                schedules.forEach(s => {
                    const parts = [
                        `${s.schedule_date} | ${s.start_time.slice(0, 5)}-${s.end_time.slice(0, 5)}`,
                        s.location,
                        s.notes,
                        s.group_name
                    ];
                    const text = parts.filter(Boolean).join(' | ');
                    const highlightedHTML = highlightText(text, keywords);
                    listBody.appendChild(createListItem(s, highlightedHTML, modalContext, handleScheduleSelection));
                });
            };

            const displayMembers = (members, keywords = []) => {
                const listBody = document.getElementById('listModalBody');
                listBody.innerHTML = '';
                
                members.forEach(m => {
                    const orderText = m.order == 0? "정회원" : "비회원";
                    const parts = [
                        `${m.name} | ${m.gender} | ${orderText}`,
                        m.etc
                    ];
                    const text = parts.filter(Boolean).join(' | ');
                    const highlightedHTML = highlightText(text, keywords);
                    listBody.appendChild(createListItem(m, highlightedHTML, modalContext, handleMemberSelection));
                });
            };
            
            const displayMatchRecords = (records, keywords = []) => {
                const listBody = document.getElementById('listModalBody');
                listBody.innerHTML = '';
                records.forEach(r => {
                    const text = `${r.date} | ${r.court}<br>${r.team1_deuce} ${r.team1_ad || ''} vs ${r.team2_deuce} ${r.team2_ad || ''}`;
                    const highlightedHTML = highlightText(text, keywords);
                    listBody.appendChild(createListItem(r, highlightedHTML, modalContext, handleMatchRecordSelection));
                });
            };

             const displayGroups = (groups, keywords = []) => {
                const listBody = document.getElementById('listModalBody');
                listBody.innerHTML = '';
                groups.forEach(g => {
                    const highlightedHTML = highlightText(g.group_name, keywords);
                    listBody.appendChild(createListItem(g, highlightedHTML, modalContext, handleGroupSelection));
                });
            };
            
            const fetchAndDisplayAttendees = async (scheduleId) => {
                document.getElementById('attendanceScheduleInfo').dataset.id = scheduleId;
                try {
                    const response = await fetch(`/api/admin/schedule/${scheduleId}/attendees`);
                    const result = await response.json();
                    const container = document.getElementById('attendeeListContainer');
                    container.innerHTML = '';
                    if (result.success && result.attendees.length > 0) {
                        result.attendees.forEach(name => {
                            container.innerHTML += `<div class="form-check"><input class="form-check-input" type="checkbox" value="${name}" id="att-${name}"><label class="form-check-label" for="att-${name}">${name}</label></div>`;
                        });
                    } else {
                        container.textContent = '참석자가 없습니다.';
                    }
                    document.getElementById('attendeeListContainer').style.display = 'block';
                    document.getElementById('attendanceActionButtons').style.display = 'flex';

                } catch (error) { showMessage('참석자 로딩 오류', 'manageAttendanceMessage', 'red'); }
            };
            
              const fetchAndDisplayGroupMembers = async (groupId) => {
                currentGroupId = groupId;
                try {
                    const response = await fetch(`/api/admin/groups/${groupId}/members`);
                    const result = await response.json();
                    const container = document.getElementById('groupMemberListContainer');
                    container.innerHTML = '';
                    if(result.success && result.members.length > 0) {
                        result.members.forEach(member => {
                             container.innerHTML += `<div class="form-check"><input class="form-check-input" type="checkbox" data-id="${member.id}" id="gm-${member.id}"><label class="form-check-label" for="gm-${member.id}">${member.name}</label></div>`;
                        });
                    } else {
                        container.textContent = '그룹 멤버가 없습니다.';
                    }
                    document.getElementById('groupInfoContainer').style.display = 'block';
                } catch (error) { showMessage('그룹 멤버 로딩 오류', 'manageGroupMessage', 'red'); }
            };

            // --- 선택 핸들러 ---
            const handleScheduleSelection = (schedule) => {
                if (modalContext === 'manageSchedule') {
                    const form = document.getElementById('updateScheduleForm');
                    form.style.display = 'block';
                    Object.keys(schedule).forEach(key => {
                        const input = form.querySelector(`[name="${key}"]`);
                        if (input) input.value = schedule[key] || '';
                    });
                } else if (modalContext === 'manageAttendance') {
                    document.getElementById('attendanceScheduleInfo').textContent = `${schedule.schedule_date} | ${schedule.start_time.slice(0,5)}-${schedule.end_time.slice(0,5)} | ${schedule.location} | ${schedule.notes || ''} | ${schedule.group_name || ''}`;
                    document.getElementById('attendanceScheduleInfo').style.display = 'block';
                    fetchAndDisplayAttendees(schedule.id);
                }
            };

            const handleMemberSelection = async (member) => {
                if (modalContext === 'manageMember') {
                    const form = document.getElementById('updateMemberForm');
                    form.style.display = 'block';
                    document.getElementById('originalMemberName').value = member.name;
                    document.getElementById('updateMemberName').value = member.name;
                    document.getElementById('updateMemberGender').value = member.gender;
                    // [수정] birth와 phone 필드 값 설정
                    document.getElementById('updateMemberBirth').value = member.birth || '';
                    document.getElementById('updateMemberPhone').value = member.phone || '';
                    document.getElementById('updateMemberEtc').value = member.etc || '';
                    document.getElementById('updateMemberOrder').value = member.order;
                } else if (modalContext === 'addAttendee') {
                    await handleFormSubmit('/api/admin/schedule/add-attendee', 'manageAttendanceMessage', null, { scheduleId: document.getElementById('attendanceScheduleInfo').dataset.id, memberName: member.name })();
                    fetchAndDisplayAttendees(document.getElementById('attendanceScheduleInfo').dataset.id);
                } else if (modalContext === 'addGroupMember') {
                     await handleFormSubmit('/api/admin/groups/members', 'manageGroupMessage', null, { groupId: currentGroupId, memberId: member.id })();
                     fetchAndDisplayGroupMembers(currentGroupId);
                }
            };
            
            const handleMatchRecordSelection = (record) => {
                const form = document.getElementById('updateMatchRecordForm');
                form.style.display = 'block';
                Object.keys(record).forEach(key => {
                    const input = form.querySelector(`[name="${key}"]`);
                    if (input) {
                        // record[key]가 null이나 undefined가 아니면 그 값을 사용하고, 그렇지 않으면 빈 문자열을 사용합니다.
                        input.value = record[key] ?? '';
                    }
                });
                document.getElementById('updateMatchId').value = record.id;
            };

            const handleGroupSelection = (group) => {
                document.getElementById('selectedGroupName').textContent = `${group.group_name}`;
                fetchAndDisplayGroupMembers(group.id);
            };

        });
    </script>
</body>
</html>